<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>步子的学习笔记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.step520.com/"/>
  <updated>2017-03-24T08:15:47.893Z</updated>
  <id>http://blog.step520.com/</id>
  
  <author>
    <name>OneStep</name>
    <email>yongfengbu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理模式-Proxy</title>
    <link href="http://blog.step520.com/2017/03/24/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Proxy/"/>
    <id>http://blog.step520.com/2017/03/24/代理模式-Proxy/</id>
    <published>2017-03-24T08:03:57.000Z</published>
    <updated>2017-03-24T08:15:47.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><a id="more"></a>
<p> 人们对于复杂的软件系统常常有一种处理手法，即增加一层间接层，从而对系统获得一种更为灵活、满足特定需求的解决方案。<br> 现实生活中，其实操作系统就是软件和硬件之间的代理。</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p> 在面向对象系统中，有些对象由于某种原因（比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等），直接访问会给使用者、或者系统结构带来很多麻烦。</p>
<ul>
<li>如何在不失去透明操作对象的同时来管理/控制这些对象特有的复杂性？增加一层间接层是软件开发中常见的解决方式。<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><img src="https://ooo.0o0.ooo/2017/03/03/58b923d33bf06.png" alt="Proxy.png"><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3>为其他对象提供一种代理以控制对这个对象的访问。<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3></li>
<li><p>外部系统（网络系统）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">interface IEmployee</div><div class="line">&#123;</div><div class="line">    decimal GetSalary();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Employee:IEmployee</div><div class="line">&#123;</div><div class="line">    public decimal GetSalary()</div><div class="line">    &#123;</div><div class="line">        //...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class EmployeeProxy:IEmployee</div><div class="line">&#123;</div><div class="line">    public EmployeeProxy()</div><div class="line">    &#123;</div><div class="line">        //SOAP对象创建的封装</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public decimal GetSalary()</div><div class="line">    &#123;</div><div class="line">        //...SOAP封装，请求网络数据</div><div class="line">        //解析网络数据</div><div class="line">        //返回C#数据结果</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Client</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class HrSys</div><div class="line">&#123;</div><div class="line">    IEmployee emp = new EmployeeProxy();</div><div class="line">    decimal salary = emp.GetSalary();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>享元模式-Flyweight</title>
    <link href="http://blog.step520.com/2017/03/24/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F-Flyweight/"/>
    <id>http://blog.step520.com/2017/03/24/享元模式-Flyweight/</id>
    <published>2017-03-24T08:03:47.000Z</published>
    <updated>2017-03-24T08:15:57.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><a id="more"></a>
<p> 面向对象很好地解决了系统抽象性的问题，同时在大多数情况下，也不会损及系统的性能。但是，在某些特殊的应用中，由于对象的数量太大，采用面向对象会给系统带来难以承受的内存开销。比如图形应用中的图元等对象、字处理应用中的字符对象等。</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p> 采用纯粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价。</p>
<p> 如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作？</p>
<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p> 运用共享技术有效地支持大量细粒度的对象。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p> <img src="https://ooo.0o0.ooo/2017/03/03/58b8e6ba017b7.png" alt="FlyWeight.png"></p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li><p>面向对象很好地解决了抽象性的问题，但是作为一个运行在机器中的程序实体，我们需要考虑对象的代价问题。Flyweight设计模式主要解决面向对象的代价问题，一般不触及面向对象的抽象性问题。</p>
</li>
<li><p>Flyweight采用对象共享的做法来降低系统中对象的个数，从而降低细粒度对象给系统带来的内存压力。在具体实现方面，要注意对象状态的处理。</p>
</li>
<li><p>对象的数量太大从而导致对象内存开销加大——什么样的数量才算大？这需要我们仔细的根据具体应用情况进行评估，而不能凭空臆断。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3></li>
<li><p>Flyweight</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Flyweight</div><div class="line">&#123;</div><div class="line">    public char chr;</div><div class="line">    Font f;</div><div class="line">    static Hastable fontTable;</div><div class="line">    public Font CFont</div><div class="line">    &#123;</div><div class="line">        get</div><div class="line">        &#123;</div><div class="line">            return f;</div><div class="line">        &#125;</div><div class="line">        set</div><div class="line">        &#123;</div><div class="line">            if(fontTable.Keys.Exists(f))</div><div class="line">            &#123;</div><div class="line">                this.f = fontTable.Keys[f];</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                fontTable.Keys.Add(value);</div><div class="line">                f = value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Client</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Font f1 = new Font(&quot;宋体&quot;);</div><div class="line">Font f2 = new Font(&quot;宋体&quot;);</div><div class="line"></div><div class="line">Flyweight fw1 = new Flyweight();</div><div class="line">fw1.chr = &apos;c&apos;;</div><div class="line">fw1.CFont = f1;</div><div class="line"></div><div class="line">Flyweight fw2 = new Flyweight();</div><div class="line">fw2.chr = &apos;c&apos;;</div><div class="line">fw2.CFont = f2;//共享f1内存</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>外观模式-Facade</title>
    <link href="http://blog.step520.com/2017/03/24/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F-Facade/"/>
    <id>http://blog.step520.com/2017/03/24/外观模式-Facade/</id>
    <published>2017-03-24T08:03:38.000Z</published>
    <updated>2017-03-24T08:14:11.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><a id="more"></a>
<p> 假设我们需要开发一个坦克模拟系统用于模拟坦克车在各种作战环境中的行为，其中坦克系统由引擎、控制器、车轮、车身等各子系统构成。</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p> 组件的客户（即外部接口，或客户程序）和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战。</p>
<p> 如何简化外部客户程序和系统间的交互接口？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解耦？</p>
<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p> 为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p> <img src="https://ooo.0o0.ooo/2017/03/03/58b8d5c4581e8.png" alt="Facade.png"></p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li><p>从客户程序的角度来看，Facade模式不仅简化了整个组件系统的接口，同时对于组件内部与外部客户程序来说，从某种程度上也达到了一种“解耦”的效果——内部子系统的任何变化不会影响到Facade接口的变化。</p>
</li>
<li><p>Facade设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade很多时候更是一种架构设计模式。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3></li>
<li><p>接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public interface Wheel</div><div class="line">&#123;</div><div class="line">    void WActon1();</div><div class="line">    void WAction2();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface Engine</div><div class="line">&#123;</div><div class="line">    void EAction1();</div><div class="line">    void EAction2();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface Controller</div><div class="line">&#123;</div><div class="line">    void CAction1();</div><div class="line">    void CAction2();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Facade</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Facade</div><div class="line">&#123;</div><div class="line">    Wheel[] wheels = WheelFactory.GetWheel(4);</div><div class="line">    Engine[] engines = EngineFactory.GetEngine(2);</div><div class="line">    Controller controller = Controller.GetController(1);</div><div class="line"></div><div class="line">    public void Run()</div><div class="line">    &#123;</div><div class="line">        wheels[0].WAction1();</div><div class="line">        //..</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void Stop()</div><div class="line">    &#123;</div><div class="line">        wheels[0].SAction1();</div><div class="line">        //..</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Client</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//不必关心Wheel和Engine等的具体实现，只需关注Facade</div><div class="line">Facade facade = new Facade();</div><div class="line">facade.Run();</div><div class="line">facade.Stop();</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰模式-Decorator</title>
    <link href="http://blog.step520.com/2017/03/24/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F-Decorator/"/>
    <id>http://blog.step520.com/2017/03/24/装饰模式-Decorator/</id>
    <published>2017-03-24T08:03:13.000Z</published>
    <updated>2017-03-24T08:13:03.824Z</updated>
    
    <content type="html"><![CDATA[<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><a id="more"></a>
<p> 假如我们需要为游戏中开发一种坦克，除了各种不同的型号的坦克外，我们还希望在不同场合中为其增加以下一种或多种功能：比如红外线夜视功能，比如水陆两栖功能，比如卫星定位功能等等。<br> 如果再添加一种功能D，那么需要增加的T50子类的数量可想而知，而这只是T50这个类型，如果还有其他T70等类型，那么需要新添加的子类将不可计数。</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p> 上述描述的问题根源在于我们“过度地使用了继承来扩展对象的功能”，由于继承为类型引入的静态特质（所谓静态特质，就是说如果想要某种功能，我们必须在编译的时候就要定义这个类，这也是强类型语言的特点。静态，就是指在编译的时候要确定的东西；动态，是指运行时确定的东西），使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀（多继承）。</p>
<p> 如何使“对象功能的扩展”能够根据需要来动态（即运行时）地实现？同时避免“扩展功能的增多”带来的子类膨胀问题？从而使得任何“功能扩展变化”所导致的影响降为最低？</p>
<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p> 动态地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类更为灵活。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p> <img src="https://ooo.0o0.ooo/2017/03/02/58b7e7aa5bb17.png" alt="Decorator.png"></p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li><p>通过采用组合、而非继承的手法，Decorator模式实现了在运行时（就是在客户代码Main函数里写的代码）动态地扩展对象功能的能力，而且可以根据需要扩展多个功能。避免了单独使用继承带来的“灵活性差”和“多子类衍生问题”。</p>
</li>
<li><p>Component类在Decorator模式中充当抽象接口的角色，不应该去实现具体的行为。而且Decorator类对于Component类应该透明——换言之Component类无需知道Decorator类，Decorator类是从外部来扩展Component类的功能。</p>
</li>
<li><p>Decorator类在接口上表现为Is-A：Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上有表现为Has-A：Component的组合关系，即Decorator类又使用了另外一个Component类。我们可以使用一个或者多个Decorator对象来“装饰”一个Component对象，且装饰后的对象仍然是一个Component对象。</p>
</li>
<li><p>Decorator模式并非解决“多子类衍生的多继承”问题，Decorator模式，应用的要点在于解决“主体类在多个方向上的扩展功能”——是为“装饰”的含义。</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3></li>
<li><p>Tank</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public abstract class Tank</div><div class="line">&#123;</div><div class="line">    public abstract void Run();</div><div class="line">    public abstract void Stop();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class T50:Tank</div><div class="line">&#123;</div><div class="line">    public void Run()</div><div class="line">    &#123;</div><div class="line">        //..</div><div class="line">    &#125;</div><div class="line">    public void Stop()</div><div class="line">    &#123;</div><div class="line">        //..</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>装饰</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">//装饰</div><div class="line">public abstract class Decorator:Tank</div><div class="line">&#123;</div><div class="line">    private Tank tank;</div><div class="line">    public Decorator(Tank tank)</div><div class="line">    &#123;</div><div class="line">        this.tank = tank;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        tank.Run();</div><div class="line">    &#125;</div><div class="line">    public override void Stop()</div><div class="line">    &#123;</div><div class="line">        tank.Stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//红外</div><div class="line">public class DecoratorA:Decorator</div><div class="line">&#123;</div><div class="line">    public DecoratorA(Tank tank):base(tank)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        //红外扩展功能</div><div class="line">        //...</div><div class="line"></div><div class="line">        //do run</div><div class="line">        base.Run();</div><div class="line">    &#125;</div><div class="line">    public override void Stop()</div><div class="line">    &#123;</div><div class="line">        //红外扩展功能</div><div class="line">        //...</div><div class="line"></div><div class="line">        //do stop</div><div class="line">        base.Stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//两栖</div><div class="line">public class DecoratorB:Decorator</div><div class="line">&#123;</div><div class="line">    public DecoratorB(Tank tank):base(tank)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        //两栖扩展功能</div><div class="line">        //...</div><div class="line"></div><div class="line">        //do run</div><div class="line">        base.Run();</div><div class="line">    &#125;</div><div class="line">    public override void Stop()</div><div class="line">    &#123;</div><div class="line">        //两栖扩展功能</div><div class="line">        //...</div><div class="line"></div><div class="line">        //do stop</div><div class="line">        base.Stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//卫星定位</div><div class="line">public class DecoratorC:Decorator</div><div class="line">&#123;</div><div class="line">    public DecoratorB(Tank tank):base(tank)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        //卫星定位扩展功能</div><div class="line">        //...</div><div class="line"></div><div class="line">        //do run</div><div class="line">        base.Run();</div><div class="line">    &#125;</div><div class="line">    public override void Stop()</div><div class="line">    &#123;</div><div class="line">        //卫星定位扩展功能</div><div class="line">        //...</div><div class="line">        </div><div class="line">        //do stop</div><div class="line">        base.Stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Client</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Tank tank = new T50();</div><div class="line">DecoratorA da = new DecoratorA(tank);//红外</div><div class="line">//da.Run();</div><div class="line">//da.Stop();</div><div class="line">DecoratorB db = new DecoratorB(da);//红外，两栖</div><div class="line">DecoragorC dc = new DecoratorC(db);//红外，两栖，卫星定位</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;装饰模式&quot;&gt;&lt;a href=&quot;#装饰模式&quot; class=&quot;headerlink&quot; title=&quot;装饰模式&quot;&gt;&lt;/a&gt;装饰模式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>组合模式-Composite</title>
    <link href="http://blog.step520.com/2017/03/24/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F-Composite/"/>
    <id>http://blog.step520.com/2017/03/24/组合模式-Composite/</id>
    <published>2017-03-24T08:02:57.000Z</published>
    <updated>2017-03-24T08:12:25.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><a id="more"></a>
<p> 在面向对象系统中，我们常会遇到一类具有“容器”特征的对象——即它们在充当对象的同时，又是其他对象的容器</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p> 客户代码过多地依赖于对象容器复杂的内部实现结构，对象容器内部实现结构（而非抽象接口）的变化将引起客户代码的频繁变化，带来了代码的维护性、扩展性等弊端。</p>
<p> 如何将“客户代码与复杂的对象容器结构”解耦？让对象容器自己来实现自身的复杂结构，从而使得客户代码就像处理简单对象一样来处理复杂的对象容器？</p>
<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p> 将对象组合成树形结构以表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p> <img src="https://ooo.0o0.ooo/2017/03/02/58b7d144c7063.png" alt="Composite.png"></p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li><p>Composite模式采用树形结构来实现普遍存在的对象容器，从而将“一对多”的关系转化为“一对一”的关系，使得客户代码可以一致地处理对象和对象容器，无需关心处理的是单个的对象，还是组合的对象容器。</p>
</li>
<li><p>将“客户代码与复杂的对象容器结构”解耦是Composite模式的核心思想，解耦之后，客户代码将与纯粹的抽象接口——而非对象容器的复杂内部实现结构——发生依赖关系，从而更能“应对变化”。</p>
</li>
<li><p>Composite模式中，是将“Add和Remove等和对象容器相关的方法”定义在“表示抽象对象的Component类”中，还是将其定义在“表示对象容器的Composite类”中，是一个关乎“透明性”和“安全性”的两难问题，需要仔细权衡。这里有可能违背面向对象的“单一职责原则”，但是对于这种特殊结构，这又是必须付出的代价。ASP.Net控件的实现在这方面为我们提供了一个很好的示范。</p>
</li>
<li><p>Composite模式在具体实现中，可以让父对象中的子对象反向追朔；如果父对象有频繁的遍历需求，可使用缓存技巧来改善效率。</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3></li>
<li><p>组合模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public abstract class IBox</div><div class="line">&#123;</div><div class="line">    public abstract void Process();</div><div class="line">    public abstract void Add(IBox box);</div><div class="line">    public abstract void Remove(IBox box);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class SingleBox:IBox</div><div class="line">&#123;</div><div class="line">    public override void Process()</div><div class="line">    &#123;</div><div class="line">        //..</div><div class="line">    &#125;</div><div class="line">    public override void Add(IBox box)&#123;&#125;</div><div class="line">    public override void Remove(IBox box)&#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class ContainerBox:IBox</div><div class="line">&#123;</div><div class="line">    ArrayList list = null;</div><div class="line">    public override void Add(IBox box)</div><div class="line">    &#123;</div><div class="line">        if(list == null)</div><div class="line">        &#123;</div><div class="line">            list = new ArrayList();</div><div class="line">        &#125;</div><div class="line">        list.Add(box);</div><div class="line">    &#125;</div><div class="line">    public override void Remove(IBox box)</div><div class="line">    &#123;</div><div class="line">        if(list == null)</div><div class="line">        &#123;</div><div class="line">            throw new exception;</div><div class="line">        &#125;</div><div class="line">        list.remove(box);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override void Process()</div><div class="line">    &#123;</div><div class="line">        //..</div><div class="line">        if(list != null)</div><div class="line">        &#123;</div><div class="line">            foreach(IBox box in list)</div><div class="line">            &#123;</div><div class="line">                box.process();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Client</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IBox box = boxFactory.getBox();</div><div class="line">//box.Add(new SingleBox());</div><div class="line">//...</div><div class="line">box.Process();</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>桥接模式-Bridge</title>
    <link href="http://blog.step520.com/2017/03/24/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F-Bridge/"/>
    <id>http://blog.step520.com/2017/03/24/桥接模式-Bridge/</id>
    <published>2017-03-24T08:02:44.000Z</published>
    <updated>2017-03-24T08:08:19.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><a id="more"></a>
<p> 假如我们需要开发一个同时支持PC和手机的坦克游戏，游戏在PC和手机上功能都一样，都有同样的类型，面临同样的功能需求变化，比如坦克可能有很多种不同的型号：T50，T75，T90……<br> 但是PC和手机上的图形绘制、声效、操作等实现完全不同……<br> 面临两个纬度的变化…</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p> 思考上述问题的症结：事实上由于Tank类型的固有逻辑，使得Tank类型具有了两个变化的维度——一个变化的维度为“平台的变化”，一个变化的维度为“型号的变化”。</p>
<p> 如何应对这种“多维度的变化”？如何利用面向对象技术来使得Tank类型可以轻松地沿着“平台”和“型号”两个方向变化，而不引入额外的复杂度？</p>
<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p> 将抽象部分与实现部分分离，使它们都可以独立地变化。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p> <img src="https://ooo.0o0.ooo/2017/03/02/58b78d2d9d106.png" alt="Brige.png"></p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li>Bridge模式使用“对象间的组合关系”解耦了抽象和实现之间固有的绑定关系，使得抽象（Tank的型号）和实现（不同的平台）可以沿着格子的维度来变化。</li>
<li>所谓抽象和实现沿着各自维度的变化，即“子类化”它们（比如不同的Tank型号子类，和不同的平台子类），得到各个子类之后，便可以任意组合它们，从而获得不同平台上的不同型号。</li>
<li>Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。Bridge模式是比多继承方案更好的解决方法。<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3></li>
<li><p>Tank</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">//Tank</div><div class="line">public abstract class Tank</div><div class="line">&#123;</div><div class="line">    protected TankPlatformImplementation tankImplementation;</div><div class="line">    public Tank(TankPlatformImplementation tankImplementation)</div><div class="line">    &#123;</div><div class="line">        this.tankImplementation = tankImplementation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TankPlatformImplementation TankImplementation</div><div class="line">    &#123;</div><div class="line">        get</div><div class="line">        &#123;</div><div class="line">            return this.tankImplementation</div><div class="line">        &#125;</div><div class="line">        set</div><div class="line">        &#123;</div><div class="line">            this.tankImplementation = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract void Run();</div><div class="line">    public abstract void Stop();</div><div class="line">&#125;</div><div class="line">public class T50:Tank</div><div class="line">&#123;</div><div class="line">    public T50(TankPlatformImplementation tankImplementation):base(tankImplementation)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        tankImplementation.Point(new Point(1,2));</div><div class="line">    &#125;</div><div class="line">    public override void Stop()</div><div class="line">    &#123;</div><div class="line">        tankImplementation.Point(new Point(0,0));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class T90:Tank</div><div class="line">&#123;</div><div class="line">    public T90(TankPlatformImplementation tankImplementation):base(tankImplementation)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        tankImplementation.Point(new Point(1,2));</div><div class="line">    &#125;</div><div class="line">    public override void Stop()</div><div class="line">    &#123;</div><div class="line">        tankImplementation.Point(new Point(0,0));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>TankPlatformImplementation（平台实现）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public abstract class TankPlatformImplementation</div><div class="line">&#123;</div><div class="line">    public abstract void PointTo(Point point);</div><div class="line">&#125;</div><div class="line">public class PCTankImplementation:TankPlatformImplementation</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line">public class MobileTankImplementation:TankPlatformImplementation</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Client</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//PC端的T50坦克</div><div class="line">TankPlatformImplementation tankImplementation = new PCTankImplementation();</div><div class="line">T50 tank = new T50(tankImplementation);</div><div class="line">//Mobile端的T90坦克</div><div class="line">MobileTankImplementation tankImplementation = new MobileTankImplementation();</div><div class="line">T90 tank = new T90(tankImplementation);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式-Adapter</title>
    <link href="http://blog.step520.com/2017/03/24/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-Adapter/"/>
    <id>http://blog.step520.com/2017/03/24/适配器模式-Adapter/</id>
    <published>2017-03-24T08:02:25.000Z</published>
    <updated>2017-03-24T08:07:40.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><a id="more"></a>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p> 在软件系统中，由于应用环境的变化， 常常需要将“一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。</p>
<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p> 将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p> <img src="https://ooo.0o0.ooo/2017/03/01/58b6945983aba.png" alt="adapter.png"></p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li>Adapter模式主要应用于“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况” ，在遗留代码复用、类库迁移等方面非常有用。</li>
<li>GoF 23 定义了两种Adapter模式的实现结构：对象适配器和类适配器。但类适配器采用“多继承”的实现方式，带来了不良的高耦合，所以一般不推荐使用。对象适配器采用“对象组合”的方式，更符合松耦合精神。</li>
<li>Adapter模式可以实现的非常灵活，不必拘泥于Gof23中定义的两种结构。例如，完全可以将Adapter模式中的“现存对象”作为新的接口方法参数，来达到适配的目的。</li>
<li>Adapter模式本身要求我们尽可能地使用“面向接口的编程”风格，这样才能在后期很方便地适配。<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3></li>
<li><p>ArrayList栈实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//栈接口</div><div class="line">public interface IStack</div><div class="line">&#123;</div><div class="line">    void Push(object item);</div><div class="line">    object Pop();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//适配器</div><div class="line">public class Adapter:IStack</div><div class="line">&#123;</div><div class="line">    //被适配对象</div><div class="line">    ArrayList adaptee;</div><div class="line">    public Adapter()</div><div class="line">    &#123;</div><div class="line">        adaptee = new ArrayList();</div><div class="line">    &#125;</div><div class="line">    public void Push(object item)</div><div class="line">    &#123;</div><div class="line">        adaptee.addItem(item);</div><div class="line">    &#125;</div><div class="line">    public object Pop()</div><div class="line">    &#123;</div><div class="line">        return adaptee.removeAt(adaptee.count -1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结构图对应实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//现有类</div><div class="line">public class Adaptee</div><div class="line">&#123;</div><div class="line">    public void SpecificRequest1()</div><div class="line">    &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    public void SpecificRequest2()</div><div class="line">    &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//新系统接口</div><div class="line">public interface ITarget</div><div class="line">&#123;</div><div class="line">    public abstract void Request();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//新系统</div><div class="line">class Sys</div><div class="line">&#123;</div><div class="line">    public void Process(ITarget target)</div><div class="line">    &#123;</div><div class="line">        target.Request();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//新系统适配</div><div class="line">public class Adapter:ITarget</div><div class="line">&#123;</div><div class="line">    Adaptee adaptee = new Adaptee();</div><div class="line">    public override void Request()</div><div class="line">    &#123;</div><div class="line">        adaptee.SpecificRequest1();</div><div class="line">        adaptee.SpecificRequest2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>原型模式-Prototype</title>
    <link href="http://blog.step520.com/2017/03/24/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Prototype/"/>
    <id>http://blog.step520.com/2017/03/24/原型模式-Prototype/</id>
    <published>2017-03-24T07:58:55.000Z</published>
    <updated>2017-03-24T08:06:50.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><a id="more"></a>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p> 在软件系统中，经常面临着“某些结构复杂的对象”的创建工作；由于需求的变化，这些对象经常面临着剧烈的变化，但是它们却拥有比较稳定一致的接口。</p>
<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p> 使用原型实例指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p> <img src="https://ooo.0o0.ooo/2017/03/01/58b64180d1c03.png" alt="prototype.png"></p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li>Prototype模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些“易变类”拥有“稳定的接口”。</li>
<li>Prototype模式对于“如何创建易变类的实体对象”采用“原型克隆”的方法来做，它使得我们可以非常灵活地动态创建“拥有某些稳定接口”的新对象——所需工作仅仅是注册一个新类的对象（即原型），然后在任何需要的地方不断地Clone。</li>
<li>Prototype模式中的Clone方法可以利用.NET中的Object类的MemberwiseClone()方法或者序列化来实现深拷贝。<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3></li>
<li><p>原型抽象对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public abstract class A</div><div class="line">&#123;</div><div class="line">    public abstract A clone();</div><div class="line">&#125;</div><div class="line">public abstract class B</div><div class="line">&#123;</div><div class="line">    public abstract B clone();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>原型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class A1:A</div><div class="line">&#123;</div><div class="line">    public override A clone()</div><div class="line">    &#123;</div><div class="line">        return (A)this.MemberwiseClone();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class A2:A</div><div class="line">&#123;</div><div class="line">    public override A clone()</div><div class="line">    &#123;</div><div class="line">        return (A)this.MemberwiseClone();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class B1:B</div><div class="line">&#123;</div><div class="line">    public override B clone()</div><div class="line">    &#123;</div><div class="line">        return (B)this.MemberwiseClone();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class B2:B</div><div class="line">&#123;</div><div class="line">    public override B clone()</div><div class="line">    &#123;</div><div class="line">        return (B)this.MemberwiseClone();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>操作对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Sys</div><div class="line">&#123;</div><div class="line">    public void Create(A a,B b)</div><div class="line">    &#123;   </div><div class="line">        A a1 = a.clone();</div><div class="line">        A a2 = a.clone();</div><div class="line"></div><div class="line">        B b1 = b.clone();</div><div class="line">        B b2 = b.clone();</div><div class="line">        B b3 = b.clone();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Client</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Sys sys = new Sys();</div><div class="line">//变化点</div><div class="line">sys.Create(new A1(),new B1());</div><div class="line">sys.Create(new A2(),new B2());</div><div class="line">sys.Create(new A1(),new B2());</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>AngularJS（7）两种搜索实现和配置实现</title>
    <link href="http://blog.step520.com/2016/12/08/AngularJS%EF%BC%887%EF%BC%89%E4%B8%A4%E7%A7%8D%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%8E%B0%E5%92%8C%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.step520.com/2016/12/08/AngularJS（7）两种搜索实现和配置实现/</id>
    <published>2016-12-08T02:48:31.000Z</published>
    <updated>2016-12-08T03:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>两种方法实现搜索功能，普通实现和指令实现。<br>全局配置的实现（公共配置）。<br><a id="more"></a></p>
<hr>
<h3 id="搜索功能实现"><a href="#搜索功能实现" class="headerlink" title="搜索功能实现"></a>搜索功能实现</h3><ol>
<li><p>普通实现（Controller）</p>
<ul>
<li><p>Html部分实现绑定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;navbar&quot; class=&quot;navbar-collapse collapse&quot;&gt;</div><div class="line">	&lt;form class=&quot;navbar-form navbar-right&quot; ng-controller=&quot;SearchController&quot; ng-submit=&quot;search()&quot;&gt;</div><div class="line">		&lt;input type=&quot;text&quot; class=&quot;form-control&quot; ng-model=&quot;input&quot; placeholder=&quot;Search...&quot;&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>js暴露数据和方法<br>暴露<em>input</em>参数，前台输入框中的value通过ng-model进行绑定;<br>暴露<em>search</em>方法，前台form回车触发通过ng-submit进行绑定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.controller(&apos;SearchController&apos;,[&apos;$scope&apos;,&apos;$route&apos;,function($scope,$route)&#123;</div><div class="line">	$scope.input = &quot;&quot;;</div><div class="line"></div><div class="line">	$scope.search = function()&#123;</div><div class="line">		console.log($scope.input);</div><div class="line">		$route.updateParams(&#123;category:&apos;search&apos;,q:$scope.input&#125;);</div><div class="line">	&#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>指令实现</p>
<ul>
<li><p>创建指令<br>创建一个js文件：search.js；<br>通过directive创建指令；<br>return返回指令内容；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(function(angular) &#123;</div><div class="line">    angular.module(&apos;moviecat.directives.search&apos;, [])</div><div class="line">        .directive(&apos;search&apos;, [&apos;$location&apos;, &apos;$route&apos;, function($location, $route) &#123;</div><div class="line">            return &#123;</div><div class="line">                scope: &#123;&#125;,</div><div class="line">                restrict: &apos;AE&apos;,</div><div class="line">                template: &apos;&lt;div id=&quot;navbar&quot; class=&quot;navbar-collapse collapse&quot;&gt;&lt;form class=&quot;navbar-form navbar-right&quot; ng-submit=&quot;search()&quot;&gt;&lt;input type=&quot;text&quot; class=&quot;form-control&quot; ng-model=&quot;text&quot; placeholder=&quot;Search...&quot;&gt;&lt;/form&gt;&lt;/div&gt;&apos;,</div><div class="line">                replact: true,</div><div class="line">                link: function($scope, iElm, iAttrs, controller) &#123;</div><div class="line">                    $scope.text = &quot;&quot;;</div><div class="line">                    $scope.search = function() &#123;</div><div class="line">                        $route.updateParams(&#123; category: &apos;search&apos;, q: $scope.text &#125;);</div><div class="line">                    &#125;;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;]);</div><div class="line">&#125;)(angular);</div></pre></td></tr></table></figure>
</li>
<li><p>引用指令<br>在入口函数或使用此指令的地方，把search指令的模块，加入依赖模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;moviecat&apos;, [</div><div class="line">    ...</div><div class="line">    &apos;search指令模块名称&apos;</div><div class="line">    ...</div><div class="line">]);</div></pre></td></tr></table></figure>
</li>
<li><p>使用指令<br>在使用的地方直接写入标签，加入search属性即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div search&gt;&lt;/div&gt;</div><div class="line">或者</div><div class="line">&lt;search&gt;&lt;/search&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>angular提供了constant命令进行配置常量，通过键值对写入常量。<br>通常把请求链接，页码等全局的常量写入其中，方便维护修改。</p>
<ul>
<li><p>创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;moviecat&apos;, [])</div><div class="line">/*为模块定义一些常量*/</div><div class="line">.constant(&apos;AppConfig&apos;, &#123;</div><div class="line">	pageSize:10,</div><div class="line">	doubanMovieApi:&apos;http://api.douban.com/v2/movie/&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>使用<br>在使用的地方，进行注入即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module.controller(&apos;MovieListController&apos;, [</div><div class="line">    &apos;$scope&apos;,</div><div class="line">    ...</div><div class="line">    &apos;AppConfig&apos;,</div><div class="line">    function($scope, AppConfig) &#123;</div><div class="line">        var count = AppConfig.pageSize;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">]);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两种方法实现搜索功能，普通实现和指令实现。&lt;br&gt;全局配置的实现（公共配置）。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
      <category term="AngularJS" scheme="http://blog.step520.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS（6）Loading</title>
    <link href="http://blog.step520.com/2016/12/07/AngularJS%EF%BC%886%EF%BC%89Loading/"/>
    <id>http://blog.step520.com/2016/12/07/AngularJS（6）Loading/</id>
    <published>2016-12-07T04:29:20.000Z</published>
    <updated>2016-12-07T06:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>页面请求数据时候，为了用户体验，会加入加载数据的动画。<br>本篇记录如何加入css3的loading动画。<br><a id="more"></a></p>
<hr>
<h3 id="搜索loading-css3"><a href="#搜索loading-css3" class="headerlink" title="搜索loading css3"></a>搜索loading css3</h3><ul>
<li><a href="http://tobiasahlin.com/spinkit/" target="_blank" rel="external">Loading CSS网址</a></li>
<li>选择一款自己喜欢的loading</li>
<li>复制css和html到项目中<ul>
<li>css复制到app.css底部</li>
<li>html复制到需要加载的html页面中</li>
</ul>
</li>
</ul>
<h3 id="通过AngularJS的双向数据绑定实现loading的隐藏显示"><a href="#通过AngularJS的双向数据绑定实现loading的隐藏显示" class="headerlink" title="通过AngularJS的双向数据绑定实现loading的隐藏显示"></a>通过AngularJS的双向数据绑定实现loading的隐藏显示</h3><ul>
<li><p>加入遮罩层</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">   &lt;!-- html --&gt;</div><div class="line">&lt;div class=&quot;mask&quot; ng-if=&quot;loading&quot;&gt;</div><div class="line">    &lt;div class=&quot;spinner&quot;&gt;</div><div class="line">        &lt;div class=&quot;dot1&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;div class=&quot;dot2&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;!-- css --&gt;</div><div class="line">.mask&#123;</div><div class="line">	position: fixed;</div><div class="line">	top: 0;</div><div class="line">	right: 0;</div><div class="line">	bottom: 0;</div><div class="line">	left: 0;</div><div class="line">	background-color:rgba(0,0,0,.4);</div><div class="line">	z-index: 2000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>赋值$scope.loading</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$scope.loading = true;</div><div class="line"></div><div class="line">HttpService.jsonp(&apos;http://api.douban.com/v2/movie/&apos; + $routeParams.category, &#123; start: start, count: count &#125;, function(data) &#123;</div><div class="line">    $scope.loading = false;</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>使用loading(ng-if=”loading”)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;mask&quot; ng-if=&quot;loading&quot;&gt;</div><div class="line">    &lt;div class=&quot;spinner&quot;&gt;</div><div class="line">        &lt;div class=&quot;dot1&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;div class=&quot;dot2&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;页面请求数据时候，为了用户体验，会加入加载数据的动画。&lt;br&gt;本篇记录如何加入css3的loading动画。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
      <category term="AngularJS" scheme="http://blog.step520.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS（5）导航焦点自动切换</title>
    <link href="http://blog.step520.com/2016/12/07/AngularJS%EF%BC%885%EF%BC%89%E5%AF%BC%E8%88%AA%E7%84%A6%E7%82%B9%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2/"/>
    <id>http://blog.step520.com/2016/12/07/AngularJS（5）导航焦点自动切换/</id>
    <published>2016-12-07T02:23:07.000Z</published>
    <updated>2016-12-07T06:48:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Angular写一个指令，点击时候，自动切换焦点。<br><a id="more"></a></p>
<h3 id="创建指令"><a href="#创建指令" class="headerlink" title="创建指令"></a>创建指令</h3><ul>
<li>创建指令命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;模块名称&apos;,[])</div><div class="line">.directive(&apos;指令名称-驼峰命名&apos;,[&apos;参数&apos;,function(参数)&#123;</div><div class="line">	 var path = $location.path();</div><div class="line">	 return&#123;</div><div class="line">	 	restrict:&apos;A&apos;,//类型</div><div class="line">	 	link:function($scope,iElm,iAttrs,controller)&#123;</div><div class="line">	 		//操作</div><div class="line">	 	&#125;</div><div class="line">	 &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="指令调用"><a href="#指令调用" class="headerlink" title="指令调用"></a>指令调用</h3><p>  如果名称为 <em> homeIndex </em> 使用的时候为 <em> home-index </em></p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul>
<li><p>创建指令directive</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(function(angular)&#123;</div><div class="line">	angular.module(&apos;moviecat.directives.autofocus&apos;,[])</div><div class="line">	.directive(&apos;autoFocus&apos;,[&apos;$location&apos;,function($location)&#123;</div><div class="line">		 var path = $location.path();</div><div class="line">		 return&#123;</div><div class="line">		 	restrict:&apos;A&apos;,</div><div class="line">		 	link:function($scope,iElm,iAttrs,controller)&#123;</div><div class="line">		 		var aLink = iElm.children().attr(&apos;href&apos;);</div><div class="line">		 		var type = aLink.replace(/#(\/.+?)\/\d+/,&apos;$1&apos;);</div><div class="line">		 		if(path.startsWith(type))&#123;</div><div class="line">		 			iElm.parent().children().removeClass(&apos;active&apos;);</div><div class="line">		 			iElm.addClass(&apos;active&apos;);</div><div class="line">		 		&#125;</div><div class="line">		 		iElm.on(&apos;click&apos;,function()&#123;</div><div class="line">		 			iElm.parent().children().removeClass(&apos;active&apos;);</div><div class="line">		 			iElm.addClass(&apos;active&apos;);</div><div class="line">		 		&#125;);</div><div class="line">		 	&#125;</div><div class="line">		 &#125;;</div><div class="line">	&#125;]);</div><div class="line">&#125;)(angular);</div></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">&lt;ul class=&quot;nav nav-sidebar&quot;&gt;</div><div class="line">	&lt;li auto-focus class=&quot;active&quot;&gt;&lt;a href=&quot;#/in_theaters/1&quot;&gt;正在热映&lt;/a&gt;&lt;/li&gt;</div><div class="line">	&lt;li auto-focus&gt;&lt;a href=&quot;#/coming_soon/1&quot;&gt;即将上映&lt;/a&gt;&lt;/li&gt;</div><div class="line">	&lt;li auto-focus&gt;&lt;a href=&quot;#/top250/1&quot;&gt;TOP250&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">   ...</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular写一个指令，点击时候，自动切换焦点。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
      <category term="AngularJS" scheme="http://blog.step520.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS（4）分页</title>
    <link href="http://blog.step520.com/2016/12/07/AngularJS%EF%BC%884%EF%BC%89%E5%88%86%E9%A1%B5/"/>
    <id>http://blog.step520.com/2016/12/07/AngularJS（4）分页/</id>
    <published>2016-12-07T02:22:56.000Z</published>
    <updated>2016-12-07T06:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据请求过多，导致加载很慢，就需要进行分页。<br>第几页page，每页多少条count，共几页totalPages。<br>page = n;<br>start = (n-1)*count;<br>totalPages = Math.ceil(tatalCount/count);<br><a id="more"></a></p>
<hr>
<h3 id="根据上述公式，结合豆瓣API源代码如下"><a href="#根据上述公式，结合豆瓣API源代码如下" class="headerlink" title="根据上述公式，结合豆瓣API源代码如下"></a>根据上述公式，结合豆瓣API源代码如下</h3><ul>
<li><p>js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">(function(angular) &#123;</div><div class="line">    &apos;use strict&apos;;</div><div class="line">    /*定义模块*/</div><div class="line">    var module = angular.module(&apos;moviecat.movie_list&apos;, [&apos;ngRoute&apos;, &apos;moviecat.services.http&apos;]);</div><div class="line">    /*定义路由*/</div><div class="line">    module.config([&apos;$routeProvider&apos;, function($routeProvider) &#123;</div><div class="line">        $routeProvider.when(&apos;/:category/:page&apos;, &#123;</div><div class="line">            templateUrl: &apos;movie_list/view.html&apos;,</div><div class="line">            controller: &apos;MovieListController&apos;</div><div class="line">        &#125;);</div><div class="line">    &#125;]);</div><div class="line">    /*定义控制器*/</div><div class="line">    module.controller(&apos;MovieListController&apos;, [</div><div class="line">        &apos;$scope&apos;,</div><div class="line">        &apos;$http&apos;,</div><div class="line">        &apos;$route&apos;,</div><div class="line">        &apos;$routeParams&apos;,</div><div class="line">        &apos;HttpService&apos;,</div><div class="line">        function($scope, $http, $route, $routeParams, HttpService) &#123;</div><div class="line">            var count = 6;</div><div class="line">            var page = parseInt($routeParams.page);</div><div class="line">            var start = (page - 1) * count;</div><div class="line">            /*model*/</div><div class="line">            $scope.loading = true;</div><div class="line">            $scope.message = &quot;&quot;;</div><div class="line">            $scope.datalist = [];</div><div class="line">            $scope.title = &quot;&quot;;</div><div class="line">            $scope.totalCount = 0;</div><div class="line">            $scope.totalPages = 0;</div><div class="line">            $scope.currentPage = page;</div><div class="line">            </div><div class="line">            HttpService.jsonp(&apos;http://api.douban.com/v2/movie/&apos; + $routeParams.category, &#123; start: start, count: count &#125;, function(data) &#123;</div><div class="line">                console.log(data);</div><div class="line">                $scope.loading = false;</div><div class="line">                $scope.title = data.title;</div><div class="line">                $scope.datalist = data.subjects;</div><div class="line">                $scope.totalCount = data.total;</div><div class="line">                $scope.totalPages = Math.ceil(data.total/count);</div><div class="line">                $scope.$apply();</div><div class="line">                console.log(data.subjects);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            /*function*/</div><div class="line">            $scope.go = function(page) &#123;</div><div class="line">                if (page &gt; 0 &amp;&amp; page &lt;= $scope.totalPages) &#123;</div><div class="line">                    $route.updateParams(&#123; page: page &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    ]);</div><div class="line"></div><div class="line">&#125;)(angular);</div></pre></td></tr></table></figure>
</li>
<li><p>html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-show=&quot;!loading&quot;&gt;</div><div class="line">    &lt;p&gt;总共：&#123;&#123;totalPages&#125;&#125;页，第&#123;&#123;currentPage&#125;&#125;/&#123;&#123;totalPages&#125;&#125;页&lt;/p&gt;</div><div class="line">    &lt;nav&gt;</div><div class="line">        &lt;ul class=&quot;pager&quot;&gt;</div><div class="line">            &lt;li ng-class=&quot;&#123;disabled:currentPage &lt; 2&#125;&quot;&gt;&lt;a href=&quot;javascript:&quot; ng-click=&quot;go(currentPage-1)&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;li ng-class=&quot;&#123;disabled:currentPage &gt;= totalPages&#125;&quot;&gt;&lt;a href=&quot;javascript:&quot; ng-click=&quot;go(currentPage+1)&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/nav&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul>
<li><p>路由通过 <strong> :变量名称 </strong> 传递变化数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">module.config([&apos;$routeProvider&apos;, function($routeProvider) &#123;</div><div class="line">    $routeProvider.when(&apos;/:category/:page&apos;, &#123;</div><div class="line">        templateUrl: &apos;movie_list/view.html&apos;,</div><div class="line">        controller: &apos;MovieListController&apos;</div><div class="line">    &#125;);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
</li>
<li><p>通过 <strong> $routeParams.变量名称 </strong> 获取路由变量值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var page = parseInt($routeParams.page);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://developers.douban.com/wiki/?title=api_v2" target="_blank" rel="external">豆瓣API地址</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据请求过多，导致加载很慢，就需要进行分页。&lt;br&gt;第几页page，每页多少条count，共几页totalPages。&lt;br&gt;page = n;&lt;br&gt;start = (n-1)*count;&lt;br&gt;totalPages = Math.ceil(tatalCount/count);&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
      <category term="AngularJS" scheme="http://blog.step520.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS（3）跨域</title>
    <link href="http://blog.step520.com/2016/12/07/AngularJS%EF%BC%883%EF%BC%89%E8%B7%A8%E5%9F%9F/"/>
    <id>http://blog.step520.com/2016/12/07/AngularJS（3）跨域/</id>
    <published>2016-12-07T02:22:43.000Z</published>
    <updated>2016-12-07T06:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>跨域几乎在前端开发总会遇到的一个东西。<br>自主开发选用：CORS（跨域资源共享）<br>第三方API仅仅提供获取数据的get请求，且不支持CORS，选用：JSONP<br>本文由于采用豆瓣第三方API，故采用JSONP方式；且不支持回调函数 mod.func带<strong> . </strong>方式，故自己写JSONP，作为Angular一个组件Service<br><a id="more"></a></p>
<hr>
<h3 id="自定义JSONP步骤"><a href="#自定义JSONP步骤" class="headerlink" title="自定义JSONP步骤"></a>自定义JSONP步骤</h3><ol>
<li>挂载回调函数<br>将回调函数挂载到window对象上，供回调；函数名称保持唯一。</li>
<li>处理URL普通参数<br>将传入的参数进行处理，拼接到URL中。如：?key1=value1&amp;key2&amp;value2</li>
<li>写入回调函数URL参数<br>将回调函数作为参数，写入URL中。如：&amp;callback=函数名</li>
<li><p>创建script标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.createElement(&apos;script&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>放入script到页面上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.body.appendChild(element);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="代码实例-写入自值型函数中"><a href="#代码实例-写入自值型函数中" class="headerlink" title="代码实例(写入自值型函数中)"></a>代码实例(写入自值型函数中)</h3><ul>
<li>源码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(function(angular)&#123;</div><div class="line">	var http = angular.module(&apos;moviecat.services.http&apos;,[]);</div><div class="line">	http.service(&apos;HttpService&apos;,[&apos;$window&apos;,&apos;$document&apos;,function($window,$document&#123;</div><div class="line">		this.jsonp = function(url,data,callback)&#123;</div><div class="line">	        /*1.0 挂载回调函数*/</div><div class="line">	        var cbFuncName = &quot;cb_func_&quot; +  Math.round().toString().replace(&apos;.&apos;,&apos;&apos;);</div><div class="line">	        $window[cbFuncName] = callback;</div><div class="line">	        /*2.0 处理URL普通参数*/</div><div class="line">	        var queryString = url.indexOf(&apos;?&apos;) == &apos;-1&apos;?&quot;?&quot;:&quot;&amp;&quot;;</div><div class="line">	        for(key in data)&#123;</div><div class="line">	        	queryString += (key + &quot;=&quot; + data[key] + &quot;&amp;&quot;);</div><div class="line">	        &#125;</div><div class="line">	        /*3.0 回调函数URL参数写入*/</div><div class="line">	        queryString += (&quot;callback=&quot; + cbFuncName);</div><div class="line">	        /*4.0 创建script标签*/</div><div class="line">	        var scriptElement = $document[0].createElement(&apos;script&apos;);</div><div class="line">	        scriptElement.src = url + queryString;</div><div class="line">	        /*5.0 将script放入页面*/			</div><div class="line">	        $document[0].body.appendChild(scriptElement);</div><div class="line">		&#125;;</div><div class="line">	&#125;]);</div><div class="line">	</div><div class="line">&#125;)(angular);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跨域几乎在前端开发总会遇到的一个东西。&lt;br&gt;自主开发选用：CORS（跨域资源共享）&lt;br&gt;第三方API仅仅提供获取数据的get请求，且不支持CORS，选用：JSONP&lt;br&gt;本文由于采用豆瓣第三方API，故采用JSONP方式；且不支持回调函数 mod.func带&lt;strong&gt; . &lt;/strong&gt;方式，故自己写JSONP，作为Angular一个组件Service&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
      <category term="AngularJS" scheme="http://blog.step520.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS（2）设计路由和基本页面</title>
    <link href="http://blog.step520.com/2016/12/07/AngularJS%EF%BC%882%EF%BC%89%E8%AE%BE%E8%AE%A1%E8%B7%AF%E7%94%B1%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%A1%B5%E9%9D%A2/"/>
    <id>http://blog.step520.com/2016/12/07/AngularJS（2）设计路由和基本页面/</id>
    <published>2016-12-07T02:22:29.000Z</published>
    <updated>2016-12-07T03:52:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Angular路由和基本页面设计<br><a id="more"></a></p>
<hr>
<h4 id="Html部分"><a href="#Html部分" class="headerlink" title="Html部分"></a>Html部分</h4><ul>
<li><p>引入css和js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;../node_modules/bootstrap/dist/css/bootstrap.min.css&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;app.css&quot;&gt;</div><div class="line">&lt;script src=&quot;../node_modules/angular/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;../node_modules/angular-route/angular-route.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;../node_modules/angular-loader/angular-loader.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;components/autofocus.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;components/http.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;movie_list/controller.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>页面布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;nav class=&quot;navbar navbar-inverse navbar-fixed-top&quot; role=&quot;navigation&quot;&gt;</div><div class="line">    &lt;div class=&quot;container-fluid&quot;&gt;</div><div class="line">        &lt;div class=&quot;navbar-header&quot;&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbar&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;navbar&quot;&gt;</div><div class="line">                &lt;span class=&quot;sr-only&quot;&gt;豆瓣电影&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;/button&gt;</div><div class="line">            &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;豆瓣电影&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div id=&quot;navbar&quot; class=&quot;navbar-collapse collapse&quot;&gt;</div><div class="line">            &lt;form class=&quot;navbar-form navbar-right&quot;&gt;</div><div class="line">                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search...&quot;&gt;</div><div class="line">            &lt;/form&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/nav&gt;</div><div class="line">&lt;div class=&quot;container-fluid&quot;&gt;</div><div class="line">    &lt;div class=&quot;row&quot;&gt;</div><div class="line">        &lt;div class=&quot;col-sm-3 col-md-2 sidebar&quot;&gt;</div><div class="line">            &lt;ul class=&quot;nav nav-sidebar&quot;&gt;</div><div class="line">            	&lt;!-- 导航路由 --&gt;</div><div class="line">                &lt;li auto-focus class=&quot;active&quot;&gt;&lt;a href=&quot;#/in_theaters/1&quot;&gt;正在热映&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li auto-focus&gt;&lt;a href=&quot;#/coming_soon/1&quot;&gt;即将上映&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li auto-focus&gt;&lt;a href=&quot;#/top250/1&quot;&gt;TOP250&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot; ng-view&gt;</div><div class="line">            </div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>注意</p>
<ul>
<li>Html或Body标签写入：ng-app=”项目名称”，建议一个项目只出现一次ng-app</li>
<li><p>Html写入路由形式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;li auto-focus class=&quot;active&quot;&gt;&lt;a href=&quot;#/in_theaters/1&quot;&gt;正在热映&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li auto-focus&gt;&lt;a href=&quot;#/coming_soon/1&quot;&gt;即将上映&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li auto-focus&gt;&lt;a href=&quot;#/top250/1&quot;&gt;TOP250&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>载入视图的地方写入ng-view</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot; ng-view&gt;</div><div class="line">    </div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h4><ul>
<li><p>定义主模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;模块名称&apos;,[]);</div></pre></td></tr></table></figure>
</li>
<li><p>写入依赖项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;模块名称&apos;,[&apos;依赖1&apos;,&apos;依赖2&apos;,...]);</div></pre></td></tr></table></figure>
</li>
<li><p>配置部分路由（其余情况），注入参数方式，方便压缩混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">模块实例.config([&apos;$routeProvider&apos;,function($routeProvider)&#123;</div><div class="line">	$routeProvider.otherwise(&#123;redirectTo:&apos;目标路由&apos;&#125;);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
</li>
<li><p>代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;moviecat&apos;, [</div><div class="line">	&apos;ngRoute&apos;,</div><div class="line">	&apos;moviecat.movie_list&apos;,</div><div class="line">	&apos;moviecat.directives.autofocus&apos;</div><div class="line">]).config([&apos;$routeProvider&apos;, function($routeProvider) &#123;</div><div class="line">	//其余情况</div><div class="line">	$routeProvider.otherwise(&#123; redirectTo: &apos;/in_theaters/1&apos; &#125;);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular路由和基本页面设计&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
      <category term="AngularJS" scheme="http://blog.step520.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS（1）项目结构</title>
    <link href="http://blog.step520.com/2016/12/07/AngularJS%EF%BC%881%EF%BC%89%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://blog.step520.com/2016/12/07/AngularJS（1）项目结构/</id>
    <published>2016-12-07T02:22:11.000Z</published>
    <updated>2016-12-08T02:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>看某培训机构视频，整理笔记。方便以后查阅。<br>项目结构进行简单介绍<br><a id="more"></a></p>
<hr>
<h4 id="项目依赖包"><a href="#项目依赖包" class="headerlink" title="项目依赖包"></a>项目依赖包</h4><ul>
<li><p>angular（angular基础包版本1.5.0）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install angular@1.5.0 --save</div></pre></td></tr></table></figure>
<p><strong> –save-dev </strong>保存仅保存到本地测试环境（自动化场景）<br><strong> –sve </strong> 保存到本项目环境（生产+测试）</p>
</li>
<li><p>angular-loader（载入模块）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install angular-loader --save</div></pre></td></tr></table></figure>
</li>
<li><p>angular-route（路由模块）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install angular-route --save</div></pre></td></tr></table></figure>
</li>
<li><p>bootstrap （h5 + c3）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install bootstrap --save</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><ul>
<li>项目名称001<ul>
<li>App</li>
<li>components (自定义组件)</li>
<li>_001 (模块名称)<ul>
<li>_001Controller.js</li>
<li>view.html</li>
</ul>
</li>
<li>_002<ul>
<li>_002Controller.js</li>
<li>view.html</li>
</ul>
</li>
<li>movie_list (模块名称)<ul>
<li>controller.js (控制器)</li>
<li>view.html (视图)</li>
</ul>
</li>
<li>app.js (主js)</li>
<li>app.css (主css)</li>
<li>index.html (主Html或入口文件)</li>
<li>node_modules (npm包)</li>
<li>package.json (配置文件)</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看某培训机构视频，整理笔记。方便以后查阅。&lt;br&gt;项目结构进行简单介绍&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
      <category term="AngularJS" scheme="http://blog.step520.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>生成器模式(Builder)</title>
    <link href="http://blog.step520.com/2016/12/05/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F-Builder/"/>
    <id>http://blog.step520.com/2016/12/05/生成器模式-Builder/</id>
    <published>2016-12-05T11:59:54.000Z</published>
    <updated>2016-12-05T14:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建型设计模式。对象的构建过程如果相对稳定，对象内的对象频繁变化，可使用此模式。<br>如，装修房子的过程稳定，先铺地板，然后天花板，最后门和窗；然地板，天花板，门，窗这些东西根据装修要求不同选用不同的材料。<br><a id="more"></a></p>
<h3 id="抽象类（房子对象以及相关对象和方法）"><a href="#抽象类（房子对象以及相关对象和方法）" class="headerlink" title="抽象类（房子对象以及相关对象和方法）"></a>抽象类（房子对象以及相关对象和方法）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public abstract class Floor</div><div class="line">&#123;&#125;</div><div class="line">public abstract class Ceiling</div><div class="line">&#123;&#125;</div><div class="line">public abstract class Window</div><div class="line">&#123;&#125;</div><div class="line">public abstract class Door</div><div class="line">&#123;&#125;</div><div class="line">public abstract class House</div><div class="line">&#123;&#125;</div><div class="line">public abstract class BuildHouse</div><div class="line">&#123;</div><div class="line">    public Floor f;</div><div class="line">    public Ceiling c;</div><div class="line">    public Window w;</div><div class="line">    public Door d;</div><div class="line">    </div><div class="line">    public abstract void BuildFloor();</div><div class="line">    public abstract void BuildCeiling();</div><div class="line">    public abstract void BuildWindow();</div><div class="line">    public abstract void BuildDoor();</div><div class="line">    </div><div class="line">    public abstract House GetHouse();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现类（具体类对象，房子的一个实现类）"><a href="#实现类（具体类对象，房子的一个实现类）" class="headerlink" title="实现类（具体类对象，房子的一个实现类）"></a>实现类（具体类对象，房子的一个实现类）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class MyFloor:Floor</div><div class="line">&#123;&#125;</div><div class="line">public class MyCeiling:Ceiling</div><div class="line">&#123;&#125;</div><div class="line">public class MyWindow:Window</div><div class="line">&#123;&#125;</div><div class="line">public class MyDoor:Door</div><div class="line">&#123;&#125;</div><div class="line">public class MyHouse:House</div><div class="line">&#123;&#125;</div><div class="line">public class MyBuildHouse:BuildHouse</div><div class="line">&#123;</div><div class="line">    public override void BuildFloor()</div><div class="line">    &#123;</div><div class="line">        f = new MyFloor();</div><div class="line">    &#125;</div><div class="line">    public override void BuildCeiling()</div><div class="line">    &#123;</div><div class="line">        c = new MyCeiling();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    public override House GetHouse()</div><div class="line">    &#123;</div><div class="line">        return new MyHouse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构建过程类（房子构建过程，稳定部分）"><a href="#构建过程类（房子构建过程，稳定部分）" class="headerlink" title="构建过程类（房子构建过程，稳定部分）"></a>构建过程类（房子构建过程，稳定部分）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class HouseManager</div><div class="line">&#123;</div><div class="line">    public House CreateHouse(BuildHouse b)</div><div class="line">    &#123;</div><div class="line">        //一地板，一天花板，两个窗，一个门（相对稳定）</div><div class="line">        b.BuildFloor();</div><div class="line">        b.BuildCeiling();</div><div class="line">        b.BuildWindow();</div><div class="line">        b.BuildWindow();</div><div class="line">        b.BuildDoor();</div><div class="line">        </div><div class="line">        return b.GetHouse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="客户端调用过程"><a href="#客户端调用过程" class="headerlink" title="客户端调用过程"></a>客户端调用过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void main()</div><div class="line">&#123;</div><div class="line">    HouserManager hm = new HouserManager();</div><div class="line">    Houser h = hm.CreateHouser(new MyBuildHouse());</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建型设计模式。对象的构建过程如果相对稳定，对象内的对象频繁变化，可使用此模式。&lt;br&gt;如，装修房子的过程稳定，先铺地板，然后天花板，最后门和窗；然地板，天花板，门，窗这些东西根据装修要求不同选用不同的材料。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>抽象工厂模式(AbstractFactory)</title>
    <link href="http://blog.step520.com/2016/12/05/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-AbstractFactory/"/>
    <id>http://blog.step520.com/2016/12/05/抽象工厂模式-AbstractFactory/</id>
    <published>2016-12-05T11:59:39.000Z</published>
    <updated>2016-12-05T14:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建型设计模式。为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。<br><a id="more"></a></p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul>
<li><p>创建一个人</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person p = new Person();</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个男人</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person p = new Man();</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个女人</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person p = new Woman();</div></pre></td></tr></table></figure>
</li>
<li><p>封装变化点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Person p = PersonFactory.GetPerson();</div><div class="line">public class PersonFactory</div><div class="line">&#123;</div><div class="line">    public static Person GetPerson()</div><div class="line">    &#123;</div><div class="line">        //需要什么实例，修改并返回所需实例</div><div class="line">        //reutrn new Person();</div><div class="line">        //return new Man();</div><div class="line">        return new Woman();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="工厂模式创建一系列相互依赖的对象"><a href="#工厂模式创建一系列相互依赖的对象" class="headerlink" title="工厂模式创建一系列相互依赖的对象"></a>工厂模式创建一系列相互依赖的对象</h3><ul>
<li><p>调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//路</div><div class="line">Road r = SkinFactory.GetRoad();</div><div class="line">//建筑物</div><div class="line">Building b = SkinFactory.GetBuilding();</div><div class="line">//丛林</div><div class="line">Jungle j = SkinFactory.Jungle();</div></pre></td></tr></table></figure>
</li>
<li><p>定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class SkinFactory()</div><div class="line">&#123;</div><div class="line">    public static Road GetRoad()</div><div class="line">    &#123;</div><div class="line">        //水泥路</div><div class="line">        return new WaterRoad();</div><div class="line">        //高速公路</div><div class="line">        //return new Highway();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static Building GetBuilding()</div><div class="line">    &#123;</div><div class="line">        //居民楼</div><div class="line">        return new ResidentBuilding();</div><div class="line">        //办公楼</div><div class="line">        //return new OfficeBuilding();   </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static Jungle GetJungle()</div><div class="line">    &#123;</div><div class="line">        //绿色丛林</div><div class="line">        return new GreenJungle();</div><div class="line">        //黄色森林(荒野)</div><div class="line">        //return new YellowJungle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>一个游戏，需要经常变换游戏场景，比如，第一个月是经典场景，第二月换为现代场景…如此看来，场景是变化点，需要对场景进行封装。也就是对上一个例子的SkinFactory进行抽象封装。(设计很大部分都是为了扩展，而非修改)</p>
<ul>
<li><p>场景抽象类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public abstract class Road&#123;&#125;</div><div class="line">public abstract class Building&#123;&#125;</div><div class="line">public abstract class Jungle&#123;&#125;</div><div class="line">public abstract class SkinFactory</div><div class="line">&#123;</div><div class="line">    public abstract Road GetRoad();</div><div class="line">    public abstract Building GetBuilding();</div><div class="line">    public abstract Jungle GetJungle();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>经典场景实现类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class WaterRoad:Road&#123;&#125;</div><div class="line">public class ResidentBuilding:Building&#123;&#125;</div><div class="line">public class GreenJungle:Jungle&#123;&#125;</div><div class="line">public class ClassicSkinFactory:SkinFactory</div><div class="line">&#123;</div><div class="line">    public override Road GetRoad()</div><div class="line">    &#123;</div><div class="line">        return new WaterRoad();</div><div class="line">    &#125;</div><div class="line">    public override Building GetBuilding()</div><div class="line">    &#123;</div><div class="line">        return new ResidentBuilding();</div><div class="line">    &#125;</div><div class="line">    public override Jungle GetJungle()</div><div class="line">    &#123;</div><div class="line">        return new GreenJungle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>现代场景实现类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Highway:Road&#123;&#125;</div><div class="line">public class OfficeBuilding:Building&#123;&#125;</div><div class="line">public class YellowJungle:Jungle&#123;&#125;</div><div class="line">public class ModernSkinFactory:SkinFactory</div><div class="line">&#123;</div><div class="line">    public override Road GetRoad()</div><div class="line">    &#123;</div><div class="line">        return new Highway();</div><div class="line">    &#125;</div><div class="line">    public override Building GetBuilding()</div><div class="line">    &#123;</div><div class="line">        return new OfficeBuilding();</div><div class="line">    &#125;</div><div class="line">    public overide Jungle GetJungle()</div><div class="line">    &#123;</div><div class="line">        return new YellowJungle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>客户端调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">void Main()</div><div class="line">&#123;</div><div class="line">    //实例化SkinFactory</div><div class="line">    SkinFactory skinFactory = new ClassicSkinFactory();</div><div class="line">    //实际调用ClassicSkinFactory.GetRoad()</div><div class="line">    Road r = skinFactory.GetRoad();</div><div class="line">    </div><div class="line">    Building b = skinFactory.GetBuilding();</div><div class="line">    Jungle j = skinFactory.GetJungle();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建型设计模式。为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂方法模式(FactoryMethod)</title>
    <link href="http://blog.step520.com/2016/12/05/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-FactoryMethod/"/>
    <id>http://blog.step520.com/2016/12/05/工厂方法模式-FactoryMethod/</id>
    <published>2016-12-05T11:59:23.000Z</published>
    <updated>2016-12-05T14:01:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建型模式。隔离类对象的使用者和具体类型之前耦合关系。<br>    FactoryMethod解决”单个对象”的需求变化；<br>    AbstractFactory解决”系列对象”的需求变化；<br>    Builder解决”对象部分”的需求变化<br><a id="more"></a></p>
<h3 id="抽象动物"><a href="#抽象动物" class="headerlink" title="抽象动物"></a>抽象动物</h3><ul>
<li><p>动物抽象类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public abstract class Animal</div><div class="line">&#123;</div><div class="line">	public abstract void SayHi();</div><div class="line">	public abstract void Run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动物工厂抽象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public abstract class FactoryAnimal</div><div class="line">&#123;</div><div class="line">    public abstract Animal CreateAnimal();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="动物狗实现类"><a href="#动物狗实现类" class="headerlink" title="动物狗实现类"></a>动物狗实现类</h3><ul>
<li><p>狗类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Dog:Animal</div><div class="line">&#123;</div><div class="line">    public override void SayHi()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;hi,i am dog&quot;);</div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;dog,dog,running...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>狗工厂类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class FactoryDog:FactoryAnimal</div><div class="line">&#123;</div><div class="line">    public override Animal CreateAnimal</div><div class="line">    &#123;</div><div class="line">        return new Dog();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="动物猫实现类"><a href="#动物猫实现类" class="headerlink" title="动物猫实现类"></a>动物猫实现类</h3><ul>
<li><p>猫类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Cat:Animal</div><div class="line">&#123;</div><div class="line">    public override void SayHi()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;hi,i am cat&quot;);</div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;cat,cat,running...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>猫工厂类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class FactoryCat:FactoryAnimal</div><div class="line">&#123;</div><div class="line">    public override Animal CreateAnimal</div><div class="line">    &#123;</div><div class="line">        return new Cat();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void main()</div><div class="line">&#123;</div><div class="line">    /*频繁变化的动物对象，变化只需扩展对象并修改此处（也可以通过配置文件设置程序反射实现，无缝对接）*/</div><div class="line">    //动物狗工厂</div><div class="line">    //FactoryAnimal fac = new FactoryDog();</div><div class="line">    //动物猫工厂</div><div class="line">    FactoryAnimal f = new FactoryCat();</div><div class="line">    </div><div class="line">    Animal a = f.CreateAnimal();</div><div class="line">    a.SayHi();</div><div class="line">    a.Run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建型模式。隔离类对象的使用者和具体类型之前耦合关系。&lt;br&gt;    FactoryMethod解决”单个对象”的需求变化；&lt;br&gt;    AbstractFactory解决”系列对象”的需求变化；&lt;br&gt;    Builder解决”对象部分”的需求变化&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式(Singleton)</title>
    <link href="http://blog.step520.com/2016/12/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-Singleton/"/>
    <id>http://blog.step520.com/2016/12/05/单例模式-Singleton/</id>
    <published>2016-12-05T11:58:58.000Z</published>
    <updated>2016-12-05T14:01:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建型设计模式。保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><a id="more"></a></p>
<h3 id="单线程单例"><a href="#单线程单例" class="headerlink" title="单线程单例"></a>单线程单例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Single</div><div class="line">&#123;</div><div class="line">    //声明静态变量</div><div class="line">    private static Single Instance;</div><div class="line">    //构造函数，不设置的话，默认是一个public的构造函数</div><div class="line">    private void Single();</div><div class="line">    //暴露的方法</div><div class="line">    public Single GetInstance()</div><div class="line">    &#123;</div><div class="line">        if(Instance == null)</div><div class="line">        &#123;</div><div class="line">          Instance = new Single();</div><div class="line">        &#125;</div><div class="line">        return Instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多线程单例"><a href="#多线程单例" class="headerlink" title="多线程单例"></a>多线程单例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Single</div><div class="line">&#123;</div><div class="line">    private static Singel Instance;</div><div class="line">    object obj = new object();</div><div class="line">    private void Single();</div><div class="line">    public Single GetInstance()</div><div class="line">    &#123;</div><div class="line">        if(Instance == null)</div><div class="line">        &#123;</div><div class="line">            lock(obj)</div><div class="line">            &#123;</div><div class="line">                if(Instance == null)</div><div class="line">                &#123;</div><div class="line">                    Instance = new Single();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return Instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="极简写法"><a href="#极简写法" class="headerlink" title="极简写法"></a>极简写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Single</div><div class="line">&#123;</div><div class="line">    public static readonly Single Instance = new Single();</div><div class="line">    private void Single();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Single</div><div class="line">&#123;</div><div class="line">    public static readonly Single Instance;</div><div class="line">    private void Single();</div><div class="line">    private static Single()</div><div class="line">    &#123;</div><div class="line">        return new Single();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建型设计模式。保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>闭包(2)</title>
    <link href="http://blog.step520.com/2016/12/05/%E9%97%AD%E5%8C%85-2/"/>
    <id>http://blog.step520.com/2016/12/05/闭包-2/</id>
    <published>2016-12-05T10:14:11.000Z</published>
    <updated>2016-12-05T14:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>闭包可以看作是一个类，通过暴露的方法(函数)可以访问内部的私有属性或变量<br>闭包就是一种语法糖，它以很自然的形式，把我们的目的和我们的目的所涉及的资源全给自动打包在一起，以某种自然、尽量不让人误解的方式让人来使用。<br><a id="more"></a></p>
<h3 id="模拟类"><a href="#模拟类" class="headerlink" title="模拟类"></a>模拟类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function getName()&#123;</div><div class="line">    var name = &quot;小菜&quot;;</div><div class="line">    var fName = function()&#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">    return fName;</div><div class="line">&#125;</div><div class="line">//getName函数返回一个获取name的函数fName（获取类里的那么，通过fName方法）</div><div class="line">var f = getName();</div><div class="line">f(); //此时才去执行fName函数</div></pre></td></tr></table></figure>
<h3 id="资源打包"><a href="#资源打包" class="headerlink" title="资源打包"></a>资源打包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//闭包实现数组和</div><div class="line">function closure_Sum(arr)&#123;</div><div class="line">    var sum = function()&#123;</div><div class="line">        return arr.reduce(function(x,y)&#123;</div><div class="line">            return x + y;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    return sum;</div><div class="line">&#125;</div><div class="line">var f1 = closure_Sum([1,2,3,4]);</div><div class="line">var f2 = closure_Sum([1,2,3,4,5]);</div><div class="line">alert(f1());    //10</div><div class="line">alert(f2());    //15</div></pre></td></tr></table></figure>
<h3 id="返回函数集合"><a href="#返回函数集合" class="headerlink" title="返回函数集合"></a>返回函数集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function closure_Count()&#123;</div><div class="line">    var arry = [];</div><div class="line">    for(var i=1;i&lt;=3;i++)&#123;</div><div class="line">        arry.push((function(n)&#123;</div><div class="line">            return function()&#123;</div><div class="line">                return n * n;</div><div class="line">            &#125;</div><div class="line">        &#125;)(i));</div><div class="line">    &#125;</div><div class="line">    return arry;</div><div class="line">&#125;</div><div class="line">var ret = closure_Count();</div><div class="line">var f1 = ret[0];</div><div class="line">var f2 = ret[1];</div><div class="line">var f3 = ret[2];</div><div class="line">console.log(f1());</div><div class="line">console.log(f2());</div><div class="line">console.log(f3());</div></pre></td></tr></table></figure>
<h3 id="匿名直接执行的方法："><a href="#匿名直接执行的方法：" class="headerlink" title="匿名直接执行的方法："></a>匿名直接执行的方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(function(x,y)&#123;return x * y;&#125;)(5,6);   //30</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闭包可以看作是一个类，通过暴露的方法(函数)可以访问内部的私有属性或变量&lt;br&gt;闭包就是一种语法糖，它以很自然的形式，把我们的目的和我们的目的所涉及的资源全给自动打包在一起，以某种自然、尽量不让人误解的方式让人来使用。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
  </entry>
  
</feed>
