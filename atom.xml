<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>步子的学习笔记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.step520.com/"/>
  <updated>2016-12-05T14:00:08.647Z</updated>
  <id>http://blog.step520.com/</id>
  
  <author>
    <name>OneStep</name>
    <email>yongfengbu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生成器模式(Builder)</title>
    <link href="http://blog.step520.com/2016/12/05/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F-Builder/"/>
    <id>http://blog.step520.com/2016/12/05/生成器模式-Builder/</id>
    <published>2016-12-05T11:59:54.000Z</published>
    <updated>2016-12-05T14:00:08.647Z</updated>
    
    <content type="html"><![CDATA[<p>创建型设计模式。对象的构建过程如果相对稳定，对象内的对象频繁变化，可使用此模式。<br>如，装修房子的过程稳定，先铺地板，然后天花板，最后门和窗；然地板，天花板，门，窗这些东西根据装修要求不同选用不同的材料。<br><a id="more"></a></p>
<h3 id="抽象类（房子对象以及相关对象和方法）"><a href="#抽象类（房子对象以及相关对象和方法）" class="headerlink" title="抽象类（房子对象以及相关对象和方法）"></a>抽象类（房子对象以及相关对象和方法）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public abstract class Floor</div><div class="line">&#123;&#125;</div><div class="line">public abstract class Ceiling</div><div class="line">&#123;&#125;</div><div class="line">public abstract class Window</div><div class="line">&#123;&#125;</div><div class="line">public abstract class Door</div><div class="line">&#123;&#125;</div><div class="line">public abstract class House</div><div class="line">&#123;&#125;</div><div class="line">public abstract class BuildHouse</div><div class="line">&#123;</div><div class="line">    public Floor f;</div><div class="line">    public Ceiling c;</div><div class="line">    public Window w;</div><div class="line">    public Door d;</div><div class="line">    </div><div class="line">    public abstract void BuildFloor();</div><div class="line">    public abstract void BuildCeiling();</div><div class="line">    public abstract void BuildWindow();</div><div class="line">    public abstract void BuildDoor();</div><div class="line">    </div><div class="line">    public abstract House GetHouse();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现类（具体类对象，房子的一个实现类）"><a href="#实现类（具体类对象，房子的一个实现类）" class="headerlink" title="实现类（具体类对象，房子的一个实现类）"></a>实现类（具体类对象，房子的一个实现类）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class MyFloor:Floor</div><div class="line">&#123;&#125;</div><div class="line">public class MyCeiling:Ceiling</div><div class="line">&#123;&#125;</div><div class="line">public class MyWindow:Window</div><div class="line">&#123;&#125;</div><div class="line">public class MyDoor:Door</div><div class="line">&#123;&#125;</div><div class="line">public class MyHouse:House</div><div class="line">&#123;&#125;</div><div class="line">public class MyBuildHouse:BuildHouse</div><div class="line">&#123;</div><div class="line">    public override void BuildFloor()</div><div class="line">    &#123;</div><div class="line">        f = new MyFloor();</div><div class="line">    &#125;</div><div class="line">    public override void BuildCeiling()</div><div class="line">    &#123;</div><div class="line">        c = new MyCeiling();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    public override House GetHouse()</div><div class="line">    &#123;</div><div class="line">        return new MyHouse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构建过程类（房子构建过程，稳定部分）"><a href="#构建过程类（房子构建过程，稳定部分）" class="headerlink" title="构建过程类（房子构建过程，稳定部分）"></a>构建过程类（房子构建过程，稳定部分）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class HouseManager</div><div class="line">&#123;</div><div class="line">    public House CreateHouse(BuildHouse b)</div><div class="line">    &#123;</div><div class="line">        //一地板，一天花板，两个窗，一个门（相对稳定）</div><div class="line">        b.BuildFloor();</div><div class="line">        b.BuildCeiling();</div><div class="line">        b.BuildWindow();</div><div class="line">        b.BuildWindow();</div><div class="line">        b.BuildDoor();</div><div class="line">        </div><div class="line">        return b.GetHouse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="客户端调用过程"><a href="#客户端调用过程" class="headerlink" title="客户端调用过程"></a>客户端调用过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void main()</div><div class="line">&#123;</div><div class="line">    HouserManager hm = new HouserManager();</div><div class="line">    Houser h = hm.CreateHouser(new MyBuildHouse());</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建型设计模式。对象的构建过程如果相对稳定，对象内的对象频繁变化，可使用此模式。&lt;br&gt;如，装修房子的过程稳定，先铺地板，然后天花板，最后门和窗；然地板，天花板，门，窗这些东西根据装修要求不同选用不同的材料。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>抽象工厂模式(AbstractFactory)</title>
    <link href="http://blog.step520.com/2016/12/05/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-AbstractFactory/"/>
    <id>http://blog.step520.com/2016/12/05/抽象工厂模式-AbstractFactory/</id>
    <published>2016-12-05T11:59:39.000Z</published>
    <updated>2016-12-05T14:01:47.191Z</updated>
    
    <content type="html"><![CDATA[<p>创建型设计模式。为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。<br><a id="more"></a></p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul>
<li><p>创建一个人</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person p = new Person();</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个男人</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person p = new Man();</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个女人</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person p = new Woman();</div></pre></td></tr></table></figure>
</li>
<li><p>封装变化点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Person p = PersonFactory.GetPerson();</div><div class="line">public class PersonFactory</div><div class="line">&#123;</div><div class="line">    public static Person GetPerson()</div><div class="line">    &#123;</div><div class="line">        //需要什么实例，修改并返回所需实例</div><div class="line">        //reutrn new Person();</div><div class="line">        //return new Man();</div><div class="line">        return new Woman();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="工厂模式创建一系列相互依赖的对象"><a href="#工厂模式创建一系列相互依赖的对象" class="headerlink" title="工厂模式创建一系列相互依赖的对象"></a>工厂模式创建一系列相互依赖的对象</h3><ul>
<li><p>调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//路</div><div class="line">Road r = SkinFactory.GetRoad();</div><div class="line">//建筑物</div><div class="line">Building b = SkinFactory.GetBuilding();</div><div class="line">//丛林</div><div class="line">Jungle j = SkinFactory.Jungle();</div></pre></td></tr></table></figure>
</li>
<li><p>定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class SkinFactory()</div><div class="line">&#123;</div><div class="line">    public static Road GetRoad()</div><div class="line">    &#123;</div><div class="line">        //水泥路</div><div class="line">        return new WaterRoad();</div><div class="line">        //高速公路</div><div class="line">        //return new Highway();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static Building GetBuilding()</div><div class="line">    &#123;</div><div class="line">        //居民楼</div><div class="line">        return new ResidentBuilding();</div><div class="line">        //办公楼</div><div class="line">        //return new OfficeBuilding();   </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static Jungle GetJungle()</div><div class="line">    &#123;</div><div class="line">        //绿色丛林</div><div class="line">        return new GreenJungle();</div><div class="line">        //黄色森林(荒野)</div><div class="line">        //return new YellowJungle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>一个游戏，需要经常变换游戏场景，比如，第一个月是经典场景，第二月换为现代场景…如此看来，场景是变化点，需要对场景进行封装。也就是对上一个例子的SkinFactory进行抽象封装。(设计很大部分都是为了扩展，而非修改)</p>
<ul>
<li><p>场景抽象类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public abstract class Road&#123;&#125;</div><div class="line">public abstract class Building&#123;&#125;</div><div class="line">public abstract class Jungle&#123;&#125;</div><div class="line">public abstract class SkinFactory</div><div class="line">&#123;</div><div class="line">    public abstract Road GetRoad();</div><div class="line">    public abstract Building GetBuilding();</div><div class="line">    public abstract Jungle GetJungle();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>经典场景实现类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class WaterRoad:Road&#123;&#125;</div><div class="line">public class ResidentBuilding:Building&#123;&#125;</div><div class="line">public class GreenJungle:Jungle&#123;&#125;</div><div class="line">public class ClassicSkinFactory:SkinFactory</div><div class="line">&#123;</div><div class="line">    public override Road GetRoad()</div><div class="line">    &#123;</div><div class="line">        return new WaterRoad();</div><div class="line">    &#125;</div><div class="line">    public override Building GetBuilding()</div><div class="line">    &#123;</div><div class="line">        return new ResidentBuilding();</div><div class="line">    &#125;</div><div class="line">    public override Jungle GetJungle()</div><div class="line">    &#123;</div><div class="line">        return new GreenJungle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>现代场景实现类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Highway:Road&#123;&#125;</div><div class="line">public class OfficeBuilding:Building&#123;&#125;</div><div class="line">public class YellowJungle:Jungle&#123;&#125;</div><div class="line">public class ModernSkinFactory:SkinFactory</div><div class="line">&#123;</div><div class="line">    public override Road GetRoad()</div><div class="line">    &#123;</div><div class="line">        return new Highway();</div><div class="line">    &#125;</div><div class="line">    public override Building GetBuilding()</div><div class="line">    &#123;</div><div class="line">        return new OfficeBuilding();</div><div class="line">    &#125;</div><div class="line">    public overide Jungle GetJungle()</div><div class="line">    &#123;</div><div class="line">        return new YellowJungle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>客户端调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">void Main()</div><div class="line">&#123;</div><div class="line">    //实例化SkinFactory</div><div class="line">    SkinFactory skinFactory = new ClassicSkinFactory();</div><div class="line">    //实际调用ClassicSkinFactory.GetRoad()</div><div class="line">    Road r = skinFactory.GetRoad();</div><div class="line">    </div><div class="line">    Building b = skinFactory.GetBuilding();</div><div class="line">    Jungle j = skinFactory.GetJungle();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建型设计模式。为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂方法模式(FactoryMethod)</title>
    <link href="http://blog.step520.com/2016/12/05/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-FactoryMethod/"/>
    <id>http://blog.step520.com/2016/12/05/工厂方法模式-FactoryMethod/</id>
    <published>2016-12-05T11:59:23.000Z</published>
    <updated>2016-12-05T14:01:42.864Z</updated>
    
    <content type="html"><![CDATA[<p>创建型模式。隔离类对象的使用者和具体类型之前耦合关系。<br>    FactoryMethod解决”单个对象”的需求变化；<br>    AbstractFactory解决”系列对象”的需求变化；<br>    Builder解决”对象部分”的需求变化<br><a id="more"></a></p>
<h3 id="抽象动物"><a href="#抽象动物" class="headerlink" title="抽象动物"></a>抽象动物</h3><ul>
<li><p>动物抽象类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public abstract class Animal</div><div class="line">&#123;</div><div class="line">	public abstract void SayHi();</div><div class="line">	public abstract void Run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动物工厂抽象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public abstract class FactoryAnimal</div><div class="line">&#123;</div><div class="line">    public abstract Animal CreateAnimal();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="动物狗实现类"><a href="#动物狗实现类" class="headerlink" title="动物狗实现类"></a>动物狗实现类</h3><ul>
<li><p>狗类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Dog:Animal</div><div class="line">&#123;</div><div class="line">    public override void SayHi()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;hi,i am dog&quot;);</div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;dog,dog,running...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>狗工厂类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class FactoryDog:FactoryAnimal</div><div class="line">&#123;</div><div class="line">    public override Animal CreateAnimal</div><div class="line">    &#123;</div><div class="line">        return new Dog();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="动物猫实现类"><a href="#动物猫实现类" class="headerlink" title="动物猫实现类"></a>动物猫实现类</h3><ul>
<li><p>猫类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Cat:Animal</div><div class="line">&#123;</div><div class="line">    public override void SayHi()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;hi,i am cat&quot;);</div><div class="line">    &#125;</div><div class="line">    public override void Run()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;cat,cat,running...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>猫工厂类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class FactoryCat:FactoryAnimal</div><div class="line">&#123;</div><div class="line">    public override Animal CreateAnimal</div><div class="line">    &#123;</div><div class="line">        return new Cat();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void main()</div><div class="line">&#123;</div><div class="line">    /*频繁变化的动物对象，变化只需扩展对象并修改此处（也可以通过配置文件设置程序反射实现，无缝对接）*/</div><div class="line">    //动物狗工厂</div><div class="line">    //FactoryAnimal fac = new FactoryDog();</div><div class="line">    //动物猫工厂</div><div class="line">    FactoryAnimal f = new FactoryCat();</div><div class="line">    </div><div class="line">    Animal a = f.CreateAnimal();</div><div class="line">    a.SayHi();</div><div class="line">    a.Run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建型模式。隔离类对象的使用者和具体类型之前耦合关系。&lt;br&gt;    FactoryMethod解决”单个对象”的需求变化；&lt;br&gt;    AbstractFactory解决”系列对象”的需求变化；&lt;br&gt;    Builder解决”对象部分”的需求变化&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式(Singleton)</title>
    <link href="http://blog.step520.com/2016/12/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-Singleton/"/>
    <id>http://blog.step520.com/2016/12/05/单例模式-Singleton/</id>
    <published>2016-12-05T11:58:58.000Z</published>
    <updated>2016-12-05T14:01:30.828Z</updated>
    
    <content type="html"><![CDATA[<p>创建型设计模式。保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><a id="more"></a></p>
<h3 id="单线程单例"><a href="#单线程单例" class="headerlink" title="单线程单例"></a>单线程单例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Single</div><div class="line">&#123;</div><div class="line">    //声明静态变量</div><div class="line">    private static Single Instance;</div><div class="line">    //构造函数，不设置的话，默认是一个public的构造函数</div><div class="line">    private void Single();</div><div class="line">    //暴露的方法</div><div class="line">    public Single GetInstance()</div><div class="line">    &#123;</div><div class="line">        if(Instance == null)</div><div class="line">        &#123;</div><div class="line">          Instance = new Single();</div><div class="line">        &#125;</div><div class="line">        return Instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多线程单例"><a href="#多线程单例" class="headerlink" title="多线程单例"></a>多线程单例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Single</div><div class="line">&#123;</div><div class="line">    private static Singel Instance;</div><div class="line">    object obj = new object();</div><div class="line">    private void Single();</div><div class="line">    public Single GetInstance()</div><div class="line">    &#123;</div><div class="line">        if(Instance == null)</div><div class="line">        &#123;</div><div class="line">            lock(obj)</div><div class="line">            &#123;</div><div class="line">                if(Instance == null)</div><div class="line">                &#123;</div><div class="line">                    Instance = new Single();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return Instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="极简写法"><a href="#极简写法" class="headerlink" title="极简写法"></a>极简写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Single</div><div class="line">&#123;</div><div class="line">    public static readonly Single Instance = new Single();</div><div class="line">    private void Single();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Single</div><div class="line">&#123;</div><div class="line">    public static readonly Single Instance;</div><div class="line">    private void Single();</div><div class="line">    private static Single()</div><div class="line">    &#123;</div><div class="line">        return new Single();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建型设计模式。保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.step520.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>闭包(2)</title>
    <link href="http://blog.step520.com/2016/12/05/%E9%97%AD%E5%8C%85-2/"/>
    <id>http://blog.step520.com/2016/12/05/闭包-2/</id>
    <published>2016-12-05T10:14:11.000Z</published>
    <updated>2016-12-05T14:01:53.196Z</updated>
    
    <content type="html"><![CDATA[<p>闭包可以看作是一个类，通过暴露的方法(函数)可以访问内部的私有属性或变量<br>闭包就是一种语法糖，它以很自然的形式，把我们的目的和我们的目的所涉及的资源全给自动打包在一起，以某种自然、尽量不让人误解的方式让人来使用。<br><a id="more"></a></p>
<h3 id="模拟类"><a href="#模拟类" class="headerlink" title="模拟类"></a>模拟类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function getName()&#123;</div><div class="line">    var name = &quot;小菜&quot;;</div><div class="line">    var fName = function()&#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">    return fName;</div><div class="line">&#125;</div><div class="line">//getName函数返回一个获取name的函数fName（获取类里的那么，通过fName方法）</div><div class="line">var f = getName();</div><div class="line">f(); //此时才去执行fName函数</div></pre></td></tr></table></figure>
<h3 id="资源打包"><a href="#资源打包" class="headerlink" title="资源打包"></a>资源打包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//闭包实现数组和</div><div class="line">function closure_Sum(arr)&#123;</div><div class="line">    var sum = function()&#123;</div><div class="line">        return arr.reduce(function(x,y)&#123;</div><div class="line">            return x + y;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    return sum;</div><div class="line">&#125;</div><div class="line">var f1 = closure_Sum([1,2,3,4]);</div><div class="line">var f2 = closure_Sum([1,2,3,4,5]);</div><div class="line">alert(f1());    //10</div><div class="line">alert(f2());    //15</div></pre></td></tr></table></figure>
<h3 id="返回函数集合"><a href="#返回函数集合" class="headerlink" title="返回函数集合"></a>返回函数集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function closure_Count()&#123;</div><div class="line">    var arry = [];</div><div class="line">    for(var i=1;i&lt;=3;i++)&#123;</div><div class="line">        arry.push((function(n)&#123;</div><div class="line">            return function()&#123;</div><div class="line">                return n * n;</div><div class="line">            &#125;</div><div class="line">        &#125;)(i));</div><div class="line">    &#125;</div><div class="line">    return arry;</div><div class="line">&#125;</div><div class="line">var ret = closure_Count();</div><div class="line">var f1 = ret[0];</div><div class="line">var f2 = ret[1];</div><div class="line">var f3 = ret[2];</div><div class="line">console.log(f1());</div><div class="line">console.log(f2());</div><div class="line">console.log(f3());</div></pre></td></tr></table></figure>
<h3 id="匿名直接执行的方法："><a href="#匿名直接执行的方法：" class="headerlink" title="匿名直接执行的方法："></a>匿名直接执行的方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(function(x,y)&#123;return x * y;&#125;)(5,6);   //30</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闭包可以看作是一个类，通过暴露的方法(函数)可以访问内部的私有属性或变量&lt;br&gt;闭包就是一种语法糖，它以很自然的形式，把我们的目的和我们的目的所涉及的资源全给自动打包在一起，以某种自然、尽量不让人误解的方式让人来使用。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>函数和方法(1)</title>
    <link href="http://blog.step520.com/2016/12/05/%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95-1/"/>
    <id>http://blog.step520.com/2016/12/05/函数和方法-1/</id>
    <published>2016-12-05T10:13:33.000Z</published>
    <updated>2016-12-05T14:01:26.896Z</updated>
    
    <content type="html"><![CDATA[<p>一句话总结：在一个对象中绑定函数，称为这个对象的方法。<br><a id="more"></a></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function sum(a,b)&#123;</div><div class="line">    return a + b;</div><div class="line">&#125;</div><div class="line">//调用</div><div class="line">sum(1,2); //3</div></pre></td></tr></table></figure>
<h3 id="函数另一种写法"><a href="#函数另一种写法" class="headerlink" title="函数另一种写法"></a>函数另一种写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var sum = function(a,b)&#123;</div><div class="line">    return a + b;</div><div class="line">&#125;;</div><div class="line">//调用</div><div class="line">sum(1,2);//3</div></pre></td></tr></table></figure>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var step = &#123;</div><div class="line">    &quot;name&quot;:&quot;step&quot;,</div><div class="line">    &quot;age&quot;:27,</div><div class="line">    &quot;sayHello&quot;:function()&#123;</div><div class="line">        alert(&quot;hello my name is &quot; + this.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">step.sayHello();  //函数sayHello()称为step对象的方法</div><div class="line">step.age;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一句话总结：在一个对象中绑定函数，称为这个对象的方法。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>gulp基础</title>
    <link href="http://blog.step520.com/2016/12/05/gulp%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.step520.com/2016/12/05/gulp基础/</id>
    <published>2016-12-05T10:13:03.000Z</published>
    <updated>2016-12-05T14:02:10.653Z</updated>
    
    <content type="html"><![CDATA[<p>gulp是为了方便前端开发的一种自动化构建工具。<br><a id="more"></a></p>
<h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><ul>
<li>npm install gulp –save 作为项目开发依赖安装 或者 npm installl gulp –global gulp 全局使用</li>
<li>创建一个gulpfile.js文件</li>
<li><p>gulpfile.js中写入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">gulp.task(&apos;default&apos;,function()&#123;</div><div class="line">	console.log(&apos;我是默认任务&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>命令行执行 gulp default or gulp</p>
<h3 id="gulp基础API"><a href="#gulp基础API" class="headerlink" title="gulp基础API"></a>gulp基础API</h3></li>
<li><p>载入gulp核心包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const gulp = require(&apos;gulp&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>定义一个任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;任务名称&apos;,function()&#123;</div><div class="line">	console.log(&apos;这里是任务执行体&apos;);</div><div class="line">&#125;);</div><div class="line">//命令行  $ gulp 任务名称</div></pre></td></tr></table></figure>
</li>
<li><p>拷贝文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;dest&apos;,function()&#123;</div><div class="line">gulp.src(&apos;src/**/*.*&apos;)</div><div class="line">    .pipe(gulp.dest(&apos;dist/&apos;));</div><div class="line">&#125;);</div><div class="line">//命令行 $ gulp dest</div></pre></td></tr></table></figure>
</li>
<li><p>监视文件变化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;watch&apos;,function()&#123;</div><div class="line">	gulp.watch(&apos;src/*&apos;,[&apos;任务1&apos;,&apos;任务2&apos;]);</div><div class="line">&#125;);</div><div class="line">//src目录下的任何文件变化，都会触发后面跟的 任务1和任务2</div><div class="line">//命令行 $ gulp watch</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="gulp-扩展插件"><a href="#gulp-扩展插件" class="headerlink" title="gulp 扩展插件"></a>gulp 扩展插件</h3><p>gulp本身不提供任何功能，只提供最基础的API</p>
<ul>
<li><p>gulp-less less转换为css<br><a href="https://www.npmjs.com/package/gulp-less" target="_blank" rel="external">gulp-less</a><br><a href="https://github.com/plus3network/gulp-less" target="_blank" rel="external">git：gulp-less</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;style&apos;,function()&#123;</div><div class="line">return gulp.src(&apos;src/**/*.less&apos;)</div><div class="line">                .pipe(less())</div><div class="line">                .pipe(gulp.dest(&apos;dist/&apos;));</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;watch&apos;,function()&#123;</div><div class="line">	gulp.watch(&apos;src/**/*.less&apos;,[&apos;style&apos;]);</div><div class="line">&#125;);</div><div class="line">//命令行 $ gulp watch</div></pre></td></tr></table></figure>
</li>
<li><p>gulp-connect 可以创建一个本地服务器<br><a href="https://www.npmjs.com/package/gulp-connect" target="_blank" rel="external">gulp-connect</a><br><a href="https://www.npmjs.com/package/gulp-connect" target="_blank" rel="external">git：gulp-connect</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const connect = require(&apos;gulp-connect&apos;);</div><div class="line">gulp.task(&apos;serve&apos;,function()&#123;</div><div class="line">	connect.server(&#123;</div><div class="line">	    root:&apos;public&apos;,</div><div class="line">	    livereload:true,</div><div class="line">	    port:8888</div><div class="line">	&#125;);</div><div class="line">	gulp.watch(&apos;监视的文件&apos;,[&apos;reload&apos;]);</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;reload&apos;,function()&#123;</div><div class="line">    gulp.src(&apos;监视的文件&apos;).pipe(connect.reload());</div><div class="line">&#125;);</div><div class="line">//命令行 $ gulp serve</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="图图图"><a href="#图图图" class="headerlink" title="图图图"></a>图图图</h3><p><img src="https://ooo.0o0.ooo/2016/04/21/57198d2e7bc85.png" alt="1.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gulp是为了方便前端开发的一种自动化构建工具。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.step520.com/categories/javascript/"/>
    
    
      <category term="gulp" scheme="http://blog.step520.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>gitbook连接github</title>
    <link href="http://blog.step520.com/2016/12/05/gitbook%E8%BF%9E%E6%8E%A5github/"/>
    <id>http://blog.step520.com/2016/12/05/gitbook连接github/</id>
    <published>2016-12-05T07:59:05.000Z</published>
    <updated>2016-12-05T14:02:06.071Z</updated>
    
    <content type="html"><![CDATA[<p>使用github作为仓库，代码提交到github自动编译发布电子书到gitbook<br><a id="more"></a></p>
<h4 id="github账号登陆gitbook"><a href="#github账号登陆gitbook" class="headerlink" title="github账号登陆gitbook"></a>github账号登陆gitbook</h4><p>  <img src="https://ooo.0o0.ooo/2016/05/10/57316d8b622cf.png" alt="1.png"></p>
<h4 id="添加book，填写相关信息"><a href="#添加book，填写相关信息" class="headerlink" title="添加book，填写相关信息"></a>添加book，填写相关信息</h4><p>  <img src="https://ooo.0o0.ooo/2016/05/10/57316d8ba4a4c.png" alt="2.png"><br>  <img src="https://ooo.0o0.ooo/2016/05/10/57316d8baad14.png" alt="3.png"></p>
<h4 id="连接github"><a href="#连接github" class="headerlink" title="连接github"></a>连接github</h4><p>  <img src="https://ooo.0o0.ooo/2016/05/10/57316d8bc47d4.png" alt="4.png"></p>
<h4 id="github创建对应的仓库"><a href="#github创建对应的仓库" class="headerlink" title="github创建对应的仓库"></a>github创建对应的仓库</h4><p>  <img src="https://ooo.0o0.ooo/2016/05/10/573173c94b34c.png" alt="5.png"></p>
<h4 id="设置权限-Manager-Permissions"><a href="#设置权限-Manager-Permissions" class="headerlink" title="设置权限(Manager Permissions)"></a>设置权限(Manager Permissions)</h4><p>  <img src="https://ooo.0o0.ooo/2016/05/10/57316d9207e46.png" alt="6.png"></p>
<h4 id="gitbook中Add-Webhook"><a href="#gitbook中Add-Webhook" class="headerlink" title="gitbook中Add Webhook"></a>gitbook中Add Webhook</h4><p>  <img src="https://ooo.0o0.ooo/2016/05/10/57316d8b9f369.png" alt="7.png"></p>
<h4 id="以上设置完毕，便可开始以下步骤"><a href="#以上设置完毕，便可开始以下步骤" class="headerlink" title="以上设置完毕，便可开始以下步骤"></a>以上设置完毕，便可开始以下步骤</h4><ul>
<li>git clone https://…</li>
<li>创建SUMMARY.md文件，写入目录</li>
<li>创建目录中对应的文件</li>
<li>gitbook build ./ ##生成gitbook</li>
<li>提交到github仓库，会自动编译到对应gitbook</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用github作为仓库，代码提交到github自动编译发布电子书到gitbook&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://blog.step520.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>天猫评论爬取和处理</title>
    <link href="http://blog.step520.com/2016/12/05/%E5%A4%A9%E7%8C%AB%E8%AF%84%E8%AE%BA%E7%88%AC%E5%8F%96%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>http://blog.step520.com/2016/12/05/天猫评论爬取和处理/</id>
    <published>2016-12-05T07:58:36.000Z</published>
    <updated>2016-12-05T14:01:35.575Z</updated>
    
    <content type="html"><![CDATA[<p>从天猫捞取评论数据，存储到MySql数据库，进而处理MySql中的数据，筛选需要的数据，钉钉发送给对应的人。<br><a id="more"></a></p>
<h4 id="Python爬取数据"><a href="#Python爬取数据" class="headerlink" title="Python爬取数据"></a>Python爬取数据</h4><ul>
<li><p>URL拼接(得到请求的URL)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">paras = urllib.urlencode(&#123;&apos;itemId&apos; : itemId,</div><div class="line">&apos;order&apos; : order,</div><div class="line">&apos;pageSize&apos; : pageSize,</div><div class="line">&apos;currentPage&apos; : currentPage,</div><div class="line">&apos;sellerId&apos; : 1,</div><div class="line">&apos;append&apos; : 0,</div><div class="line">&apos;content&apos; : 0,</div><div class="line">&apos;tagId&apos; : &apos;&apos;,</div><div class="line">&apos;callback&apos; : &apos;jsonp618&apos;&#125;)</div><div class="line">commentUrl = tmall_url + paras</div></pre></td></tr></table></figure>
</li>
<li><p>加载数据(网络请求，读取数据)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 类调用</div><div class="line">spider = Spider()</div><div class="line">data = spider.load_data(commentUrl)</div><div class="line">...</div><div class="line">def load_data(self,url):</div><div class="line">user_agent=&quot;Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10&quot;</div><div class="line">headers = &#123;&quot;User-Agent&quot;: user_agent&#125;</div><div class="line"></div><div class="line">req = urllib2.Request(url, headers = headers)</div><div class="line">response = urllib2.urlopen(req)</div><div class="line">html = response.read()</div><div class="line"></div><div class="line">return html</div></pre></td></tr></table></figure>
</li>
<li><p>处理数据(加载到的数据根据需要进行处理)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 去除换行并转码</div><div class="line">proStr = data.replace(&apos;\n&apos;,&apos;&apos;).replace(&apos;\r&apos;,&apos;&apos;).decode(&apos;latin-1&apos;)</div><div class="line"># 转为Json对象</div><div class="line">jsonData = json.loads(proStr[9:-1])</div></pre></td></tr></table></figure>
</li>
<li><p>写入MySql数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">def data_to_mysql(self,data):</div><div class="line">	conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;,user=&apos;root&apos;,passwd=&apos;123456&apos;,db=&apos;test&apos;,port=3306)</div><div class="line">	cursor = conn.cursor()</div><div class="line">	for item in data:</div><div class="line"></div><div class="line">		if &quot;wap&quot; in item[&quot;attributesMap&quot;]:</div><div class="line">			wap = item[&quot;attributesMap&quot;][&quot;wap&quot;]</div><div class="line">		else:</div><div class="line">			wap = &quot;&quot;</div><div class="line"></div><div class="line">		if &quot;ttid&quot; in item[&quot;attributesMap&quot;]:</div><div class="line">			ttid = item[&quot;attributesMap&quot;][&quot;ttid&quot;]</div><div class="line">		else:</div><div class="line">			ttid = &quot;&quot;</div><div class="line"></div><div class="line">		#print item</div><div class="line">		print &quot;\n&quot;</div><div class="line">		print item[&quot;id&quot;]</div><div class="line">		if cursor.execute(&quot;select * from jxl_comment where id = %s&quot;,[item[&quot;id&quot;]]) &lt;= 0:	</div><div class="line">			strPics = &quot;&quot;</div><div class="line">			if len(item[&quot;pics&quot;]) &gt; 0:</div><div class="line">				for itemPic in item[&quot;pics&quot;]:</div><div class="line">					strPics = strPics + itemPic + &quot;,&quot;</div><div class="line">			print cursor.execute(&apos;insert into jxl_comment (id,attributes,wap,ttid,pic_height,leafCatId,pic_width,tmall_vip_level,spuId,sku,enableTime,auctionSku,cmsSource,displayUserNick,gmtCreateTime,pics,rateContent,rateDate,sellerId,tmallSweetPic,tradeEndTime,send_status) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)&apos;,</div><div class="line">				[item[&quot;id&quot;],item[&quot;attributes&quot;],wap,ttid,item[&quot;attributesMap&quot;][&quot;pic_height&quot;],</div><div class="line">				item[&quot;attributesMap&quot;][&quot;leafCatId&quot;],item[&quot;attributesMap&quot;][&quot;pic_width&quot;],item[&quot;attributesMap&quot;][&quot;tmall_vip_level&quot;],item[&quot;attributesMap&quot;][&quot;spuId&quot;],item[&quot;attributesMap&quot;][&quot;sku&quot;],</div><div class="line">				item[&quot;attributesMap&quot;][&quot;enableTime&quot;],item[&quot;auctionSku&quot;],item[&quot;cmsSource&quot;],item[&quot;displayUserNick&quot;],item[&quot;gmtCreateTime&quot;],</div><div class="line">				strPics,item[&quot;rateContent&quot;],item[&quot;rateDate&quot;],item[&quot;sellerId&quot;],item[&quot;tmallSweetPic&quot;],</div><div class="line">				item[&quot;tradeEndTime&quot;],0])</div><div class="line">			conn.commit()</div><div class="line"></div><div class="line">	cursor.close()</div><div class="line">	conn.close()</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Python程序，1分钟的间隔去读取新的评论"><a href="#Python程序，1分钟的间隔去读取新的评论" class="headerlink" title="Python程序，1分钟的间隔去读取新的评论"></a>Python程序，1分钟的间隔去读取新的评论</h4><ul>
<li><p>Linux注册服务</p>
<ul>
<li><p>Python程序实现1分钟间隔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def main():</div><div class="line">while True:</div><div class="line">	ProcessData(&apos;21416908877&apos;,1,20,1)</div><div class="line">	time.sleep(60)</div></pre></td></tr></table></figure>
</li>
<li><p>Python程序文件上传到Linux服务器<br> 我上传的路径为：/var/www/Flask/tmall.py</p>
</li>
<li><p>Linux中/etc/rc.d/init.d/目录下创建一个服务脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">touch tmall</div><div class="line">vim tmall</div><div class="line">//写入以下内容</div><div class="line">@author:root</div><div class="line">chkconfig:35 85 15</div><div class="line">description:this tmall comment service</div><div class="line">!/usr/bin/env python /var/www/Flask/tmall.py</div></pre></td></tr></table></figure>
</li>
<li><p>添加服务到系统</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig –add tmall</div></pre></td></tr></table></figure>
</li>
<li><p>查看服务运行状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig –list tmall</div></pre></td></tr></table></figure>
<p> 运行后此服务一直不能起作用（未找到原因）？？？</p>
</li>
</ul>
</li>
<li><p>Linux运行一个后台程序</p>
<ul>
<li><p>创建后台运行程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup python /var/www/Flask/tmall.py &amp;</div></pre></td></tr></table></figure>
</li>
<li><p>成功后按任意键，回车退出</p>
</li>
<li><p>使用exit()退出终端界面，否则进程也跟着被杀死</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure>
<p>测试运行有效，在我用putty再次登陆Root账号，运行进程被kill了，未找到原因？？？</p>
<h4 id="window服务处理程序"><a href="#window服务处理程序" class="headerlink" title="window服务处理程序"></a>window服务处理程序</h4><p>此处只列出逻辑代码，具体细节请查看代码。。。</p>
</li>
<li><p>遍历MySql未处理的程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">connection.ConnectionString = connStr.ConnectionString;</div><div class="line">string sqlQuery = @&quot;select * from jxl_comment where send_status = 0&quot;;</div><div class="line">var listComment = connection.Query(sqlQuery);</div><div class="line"></div><div class="line">foreach (var item in listComment)</div><div class="line">&#123;</div><div class="line">    //业务处理</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>写入语义差评率和处理状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">string strContent = EncodeHelper.LatinToDefaul(item.rateContent);</div><div class="line">int iBadRate = DataProcess(SemanticProcess(JsonConvert.SerializeObject(strContent)));</div><div class="line"></div><div class="line">string sqlUp = string.Format(&quot;update jxl_comment set send_status = 1,bad_rate = &#123;1&#125; where id = &#123;0&#125;&quot;, item.id,iBadRate);</div><div class="line">connection.Execute(sqlUp);</div></pre></td></tr></table></figure>
</li>
<li><p>钉钉数据处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">string strComment = CommentProcess(strContent,item.pics,iBadRate);</div><div class="line">if (!string.IsNullOrEmpty(strComment))</div><div class="line">&#123;</div><div class="line">	SendCommentToDing(strComment);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="注册windows服务"><a href="#注册windows服务" class="headerlink" title="注册windows服务"></a>注册windows服务</h4><ul>
<li>生成解决方案<br>解决方案debug/bin目录下，生成exe应用程序</li>
<li>部署注册服务<br>命令行下：C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe 解决方案下的exe服务应用程序<br>如，命令行：C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe D:\WindowServer\aTestServer.exe</li>
<li>启动服务<br>计算机-&gt;管理-&gt;服务 找到对应服务启动即可</li>
<li>卸载服务<br>C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /u 解决方案下的exe服务应用程序</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从天猫捞取评论数据，存储到MySql数据库，进而处理MySql中的数据，筛选需要的数据，钉钉发送给对应的人。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.step520.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://blog.step520.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>git pro读书笔记-Git分支(2)</title>
    <link href="http://blog.step520.com/2016/12/05/git-pro%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Git%E5%88%86%E6%94%AF-2/"/>
    <id>http://blog.step520.com/2016/12/05/git-pro读书笔记-Git分支-2/</id>
    <published>2016-12-05T07:58:11.000Z</published>
    <updated>2016-12-05T14:01:57.023Z</updated>
    
    <content type="html"><![CDATA[<p>git分支简介，git的分支模型被称为“必杀技特性”。分支轻量的让人发指（~~~）。git鼓励频繁的使用分支和合并，随着使用的深入，便会理解它的强大和独特。<br><a id="more"></a></p>
<h3 id="分支基本操作"><a href="#分支基本操作" class="headerlink" title="分支基本操作"></a>分支基本操作</h3><ol>
<li><p>分支创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch newbranch</div></pre></td></tr></table></figure>
</li>
<li><p>分支切换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout newbranch</div></pre></td></tr></table></figure>
</li>
<li><p>创建并切换到此分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b newbranch</div></pre></td></tr></table></figure>
</li>
<li><p>分支的合并(把newbranch分支合并到master分支)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git merge newbranch</div></pre></td></tr></table></figure>
</li>
<li><p>删除分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -d newbranch</div></pre></td></tr></table></figure>
</li>
<li><p>强行删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -D newbranch</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ol>
<li><p>查看所有分支（本地）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure>
</li>
<li><p>查看哪些分支已经被当前分支合并</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --merged</div></pre></td></tr></table></figure>
</li>
<li><p>查看未合并到当前分支的分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --no-merged</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="分支操作步骤"><a href="#分支操作步骤" class="headerlink" title="分支操作步骤"></a>分支操作步骤</h3><ol>
<li><p>创建分支并切换到此分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b testing</div></pre></td></tr></table></figure>
</li>
<li><p>在此分支进行修改(本地工作目录)</p>
</li>
<li><p>添加到缓存区并提交(本地仓库)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -a -m &quot;some modify&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>同步到远端仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin testing</div></pre></td></tr></table></figure>
</li>
<li><p>如果需要把testing分支合并到master分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git merge testing</div><div class="line">...冲突解决(add,commit)...</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
</li>
<li><p>如果testing分支开发完毕，删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -d testing</div></pre></td></tr></table></figure>
</li>
<li><p>删除远端仓库tesing分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --delete testing</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git分支简介，git的分支模型被称为“必杀技特性”。分支轻量的让人发指（~~~）。git鼓励频繁的使用分支和合并，随着使用的深入，便会理解它的强大和独特。&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://blog.step520.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git pro读书笔记-Git基础(1)</title>
    <link href="http://blog.step520.com/2016/12/05/git-pro%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Git%E5%9F%BA%E7%A1%80-1/"/>
    <id>http://blog.step520.com/2016/12/05/git-pro读书笔记-Git基础-1/</id>
    <published>2016-12-05T07:57:47.000Z</published>
    <updated>2016-12-05T14:02:01.481Z</updated>
    
    <content type="html"><![CDATA[<p>Git基本操作<br><a id="more"></a></p>
<h4 id="获取git仓库"><a href="#获取git仓库" class="headerlink" title="获取git仓库"></a>获取git仓库</h4><ol>
<li><p>在当前目录中初始化仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git add *</div><div class="line">$ git add LICENSE</div><div class="line">$ git commit -m &quot;initial project version&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>克隆已有仓库</p>
<ul>
<li><p>https:// 协议</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/step/stepH5</div></pre></td></tr></table></figure>
</li>
<li><p>SSH 协议</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:用户名/项目名.git</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h4 id="记录每次刚更新到仓库"><a href="#记录每次刚更新到仓库" class="headerlink" title="记录每次刚更新到仓库"></a>记录每次刚更新到仓库</h4><ol>
<li><p>基本操作（已修改-&gt;已暂存-&gt;已提交）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add *</div><div class="line">$ git commit -m &quot;提交描述信息&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>一步提交（跳过暂存区域）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -a -m &quot;提交描述信息&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>一些命令</p>
<ul>
<li><p>查看状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
</li>
<li><p>状态简览</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git status -s</div><div class="line">OR</div><div class="line">$ git status --short</div></pre></td></tr></table></figure>
</li>
<li><p>比较改动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">工作目录暂存区域比较(简单来说就是工作目录的更改)：</div><div class="line">$ git diff</div><div class="line">已暂存将要提交的内容（add后准备commit的内容）：</div><div class="line">$ git diff cached</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>移除和移动</p>
<ul>
<li><p>移除(工作移除 + 暂存区移除)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">工作目录移除：</div><div class="line">$ rm 文件名称</div><div class="line">暂存区移除：</div><div class="line">$ git rm 文件名称</div></pre></td></tr></table></figure>
</li>
<li><p>移动（实现重命名）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git mv 待修改文件的名称 需要修改的名称</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git基本操作&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://blog.step520.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo在GitHub搭建博客</title>
    <link href="http://blog.step520.com/2016/12/05/Hexo%E5%9C%A8GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://blog.step520.com/2016/12/05/Hexo在GitHub搭建博客/</id>
    <published>2016-12-05T07:57:10.000Z</published>
    <updated>2016-12-05T14:02:15.772Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo支持Markdown，故试着去搭建。弃用Jekyll是因为使用的windows平台。。。<br>Git提交方式为Https，非SSL方式。SSL方式简单网上资源也多，且一个key只能绑定一个账号，所以选择Https。并实现同步远程库的时候，不用每次都输入账号密码。<br><a id="more"></a></p>
<h3 id="GitHub创建一个public仓库（名称为：-用户名-github-io-git）"><a href="#GitHub创建一个public仓库（名称为：-用户名-github-io-git）" class="headerlink" title="GitHub创建一个public仓库（名称为：{用户名}.github.io.git）"></a>GitHub创建一个public仓库（名称为：{用户名}.github.io.git）</h3><h3 id="解析一个域名-二级域名-并写入文件CNAME"><a href="#解析一个域名-二级域名-并写入文件CNAME" class="headerlink" title="解析一个域名(二级域名)并写入文件CNAME"></a>解析一个域名(二级域名)并写入文件CNAME</h3><ul>
<li>解析一个域名<br><img src="https://ooo.0o0.ooo/2016/04/11/570b6313d16e1.png" alt="1.png"></li>
<li>Github当前仓库创建一个CNAME文件，写入已经解析的域名，比如：blog.ccc.com<h3 id="引入Hexo"><a href="#引入Hexo" class="headerlink" title="引入Hexo"></a>引入Hexo</h3></li>
<li>安装Node.js(脑补)</li>
<li>安装Git(脑补)</li>
<li><p>安装Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
<li><p>工作目录初始化Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ cd</div><div class="line">$ npm install    ##可执行，可不执行</div></pre></td></tr></table></figure>
</li>
<li><p>安装deploy的git支持</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件更改</p>
<ol>
<li><p>_config.yml中的deploy更改如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">	type: git</div><div class="line">	repository: https://&#123;username&#125;:&#123;password&#125;@github.com/buyongfeng521/buyongfeng521.github.io.git</div><div class="line">	branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>.deploy_git文件夹下的.git中config文件（更改为https的格式）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;把git clone的.git的文件夹中配置文件复制到当前配置文件&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>启动本地服务(ctrl + c停止)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;名称&quot;</div><div class="line">$ hexo new [layout] &quot;名称&quot;</div><div class="line">$ hexo new [layout] &quot;名称&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>生成静态页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
</li>
<li><p>部署到GitHub</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>“hexo new”创建文件 时候 先 ”ctrl + c“停止服务</li>
<li>部署步骤<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h3><p><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">Hexo搭建Github静态博客</a><br><a href="http://wiki.jikexueyuan.com/project/hexo-document/setup.html" target="_blank" rel="external">Hexo中文版-极客学院 wiki</a><br><a href="http://ijiaober.github.io/2014/08/05/hexo/hexo-04/" target="_blank" rel="external">Hexo使用攻略（目录和标签）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo支持Markdown，故试着去搭建。弃用Jekyll是因为使用的windows平台。。。&lt;br&gt;Git提交方式为Https，非SSL方式。SSL方式简单网上资源也多，且一个key只能绑定一个账号，所以选择Https。并实现同步远程库的时候，不用每次都输入账号密码。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://blog.step520.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
